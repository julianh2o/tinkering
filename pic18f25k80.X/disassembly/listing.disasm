Disassembly Listing for pic18f25k80
Generated From:
/Users/julian/Documents/Programming/tinkering/pic18f25k80.X/dist/default/production/pic18f25k80.X.production.cof
Aug 8, 2013 1:06:21 AM

---  /Users/julian/Documents/Programming/tinkering/pic18f25k80.X/ledmaininterrupt.c  --------------------
1:             #include "config.h"
2:             #include "constants.h"
3:             #include <delays.h>
4:             #include "serlcd.h"
5:             
6:             #define STRIP_DATA_TRIS TRISBbits.TRISB0
7:             #define STRIP_DATA PORTBbits.RB0
8:             
9:             #define STATUS_TRIS TRISCbits.TRISC0
10:            #define STATUS_LED PORTCbits.RC0
11:            
12:            void delay(void);
13:            
14:            extern void updateLEDs(void);
15:            
16:            #define STRIP_LENGTH 125
17:            #define DATA_SIZE 375
18:            
19:            #define GREEN 0
20:            #define RED 20
21:            #define BLUE 20
22:            
23:            #pragma idata large_idata
24:            char led_buffer[375] = {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0};
25:            #pragma idata
26:            
27:            void main(void) {
0014  CFD9     MOVFF FSR2L, POSTINC1
0016  FFE6     NOP
0018  CFE1     MOVFF FSR1L, FSR2L
001A  FFD9     NOP
001C  0E02     MOVLW 0x2
001E  26E1     ADDWF FSR1L, F, ACCESS
28:                char val;
29:                char i;
30:                
31:                STRIP_DATA_TRIS = OUTPUT;
0020  9093     BCF TRISB, 0, ACCESS
32:                STATUS_TRIS = OUTPUT;
0022  9094     BCF TRISC, 0, ACCESS
33:                STATUS_LED = 0;
0024  9082     BCF PORTC, 0, ACCESS
34:            
35:                //setup internal oscillator
36:                OSCCONbits.IRCF = 0b111; //sets internal osc to 111=16mhz, 110=8mhz
0026  0E8F     MOVLW 0x8F
0028  14D3     ANDWF OSCCON, W, ACCESS
002A  0970     IORLW 0x70
002C  6ED3     MOVWF OSCCON, ACCESS
37:                OSCCONbits.SCS = 0b00;
002E  0EFC     MOVLW 0xFC
0030  14D3     ANDWF OSCCON, W, ACCESS
0032  0900     IORLW 0x0
0034  6ED3     MOVWF OSCCON, ACCESS
38:                OSCTUNEbits.PLLEN = 0b1; //1=pllx4 enabled
0036  8C9B     BSF OSCTUNE, 6, ACCESS
39:            
40:                //set up timer
41:                T0CONbits.TMR0ON = 1; //enable timer 0
0038  8ED5     BSF T0CON, 7, ACCESS
42:                T0CONbits.T0CS = 0; //select clock (0=internal,1=t0pin)
003A  9AD5     BCF T0CON, 5, ACCESS
43:                T0CONbits.PSA = 1; //disable's prescaler (1=disable, 0=enable)
003C  86D5     BSF T0CON, 3, ACCESS
44:                T0CONbits.T08BIT = 1; //set mode (1=8bit mode, 0=16bit mode)
003E  8CD5     BSF T0CON, 6, ACCESS
45:                T0CONbits.T0SE = 1; //edge select (1=falling edge, 0=rising edge)
0040  88D5     BSF T0CON, 4, ACCESS
46:                T0CONbits.T0PS = 0b000; //configure prescaler 000=1:2
0042  0EF8     MOVLW 0xF8
0044  14D5     ANDWF T0CON, W, ACCESS
0046  0900     IORLW 0x0
0048  6ED5     MOVWF T0CON, ACCESS
47:            
48:                //Set up timer0 interrupts
49:                INTCONbits.TMR0IE = 1;
004A  8AF2     BSF INTCON, 5, ACCESS
50:                INTCONbits.TMR0IF = 0;
004C  94F2     BCF INTCON, 2, ACCESS
51:                INTCONbits.PEIE = 1;
004E  8CF2     BSF INTCON, 6, ACCESS
52:            
53:            
54:                while(1) {
0064  D7F5     BRA 0x50
55:                    updateLEDs();
0050  D80A     RCALL updateLEDs
56:            
57:                    delay();
0052  D843     RCALL delay
58:                    delay();
0054  D842     RCALL delay
59:                    delay();
0056  D841     RCALL delay
60:            
61:                    val = led_buffer[0];
0058  C100     MOVFF led_buffer, INDF2
005A  FFDF     NOP
62:                    led_buffer[0] = led_buffer[1];
005C  C101     MOVFF 0x101, led_buffer
005E  F100     NOP
63:                    led_buffer[1] = val;
0060  CFDF     MOVFF INDF2, 0x101
0062  F101     NOP
64:                }
65:            }
66:            
67:            void updateLEDs() {
68:                _asm
69:            
70:                        BSF INTCON, 2, ACCESS //Set the interrupt flag so that we pass through the initial wait loop without waiting
0066  84F2     BSF INTCON, 2, ACCESS
71:            
72:                        //load the initial memory address and populate the shifting register
73:                        LFSR 0,led_buffer //1
0068  EE01     LFSR 0, 0x100
006A  F000     NOP
74:                        MOVF INDF0, 0, ACCESS //1
006C  50EF     MOVF INDF0, W, ACCESS
75:                        MOVWF RXB1D7, ACCESS //1
006E  6E3D     MOVWF 0x3D, ACCESS
76:            
77:                    startStrip:
78:                        //CURRENT LED
79:                        MOVLW  STRIP_LENGTH//1
0070  0E7D     MOVLW 0x7D
80:                        //MOVF len, 0, ACCESS
81:                        MOVWF RXB1D4, ACCESS //1
0072  6E3A     MOVWF 0x3A, ACCESS
82:            
83:                        //CURRENT COLOR COMPONENT
84:                        MOVLW  3//1
0074  0E03     MOVLW 0x3
85:                        MOVWF RXB1D5, ACCESS //1
0076  6E3B     MOVWF 0x3B, ACCESS
86:            
87:                        //CURRENT BIT
88:                        MOVLW  8//1
0078  0E08     MOVLW 0x8
89:                        MOVWF RXB1D6, ACCESS //1
007A  6E3C     MOVWF 0x3C, ACCESS
90:            
91:                    timerWaitLoop2:
92:                        BTFSS INTCON, 2, ACCESS //1, 2 or 3
007C  A4F2     BTFSS INTCON, 2, ACCESS
93:                        BRA timerWaitLoop2
007E  D7FE     BRA 0x7C
94:            
95:                        BSF PORTB, 0, ACCESS ///////////////////////////////////////////////// SET
0080  8081     BSF PORTB, 0, ACCESS
96:            
97:                        MOVLW 230
0082  0EE6     MOVLW 0xE6
98:                        MOVWF TMR0L, ACCESS
0084  6ED6     MOVWF TMR0L, ACCESS
99:            
100:                       //clear timer overflow (timer trips again in 20 cycles)
101:                       BCF INTCON, 2, ACCESS //1
0086  94F2     BCF INTCON, 2, ACCESS
102:           
103:                       //bit shift and set overflow flag
104:                       RLCF RXB1D7, 1, 0 //1
0088  363D     RLCF 0x3D, F, ACCESS
105:           
106:                       BC transmitOne //1 or 2
008A  E20F     BC 0xAA
107:           
108:                   transmitZero:
109:                       BCF PORTB, 0, ACCESS ///////////////////////////////////////////////// CLEAR
008C  9081     BCF PORTB, 0, ACCESS
110:           
111:                       //do stuff
112:                       // we have about 10 cycles free here
113:                       //do stuff
114:           
115:                       //Decrement current bit, jump if nonzero
116:                       DECF RXB1D6, 1, ACCESS //1
008E  063C     DECF 0x3C, F, ACCESS
117:                       BNZ timerWaitLoop2
0090  E1F5     BNZ 0x7C
118:           
119:                       //load a new byte into memory
120:                       INCF FSR0, 1, ACCESS //1
0092  2AE9     INCF FSR0L, F, ACCESS
121:                       MOVF INDF0, 0, ACCESS //1
0094  50EF     MOVF INDF0, W, ACCESS
122:                       MOVWF RXB1D7, ACCESS //1
0096  6E3D     MOVWF 0x3D, ACCESS
123:           
124:                       //CURRENT BIT
125:                       MOVLW  8//1
0098  0E08     MOVLW 0x8
126:                       MOVWF RXB1D6, ACCESS //1
009A  6E3C     MOVWF 0x3C, ACCESS
127:           
128:                       //Decrement component count
129:                       DECF RXB1D5, 1, ACCESS //1
009C  063B     DECF 0x3B, F, ACCESS
130:                       BNZ timerWaitLoop2
009E  E1EE     BNZ 0x7C
131:           
132:                       MOVLW  3//1
00A0  0E03     MOVLW 0x3
133:                       MOVWF RXB1D5, ACCESS //1
00A2  6E3B     MOVWF 0x3B, ACCESS
134:           
135:                       //Decrement LED count
136:                       DECF RXB1D4, 1, ACCESS //1
00A4  063A     DECF 0x3A, F, ACCESS
137:                       BNZ timerWaitLoop2
00A6  E1EA     BNZ 0x7C
138:           
139:                       BRA done
00A8  D013     BRA 0xD0
140:                   transmitOne:
141:                       //we have a maximum of 5 cycles here
142:                       //count NOPs
143:                       NOP
00AA  0000     NOP
144:                       NOP
00AC  0000     NOP
145:                       NOP
00AE  0000     NOP
146:                       NOP
00B0  0000     NOP
147:                       NOP
00B2  0000     NOP
148:           
149:                       BCF PORTB, 0, ACCESS ///////////////////////////////////////////////// CLEAR
00B4  9081     BCF PORTB, 0, ACCESS
150:           
151:                       // 8 cycles before timerWaitLoop
152:           
153:                       //Decrement current bit, jump if nonzero
154:                       DECF RXB1D6, 1, ACCESS //1
00B6  063C     DECF 0x3C, F, ACCESS
155:                       BNZ timerWaitLoop2
00B8  E1E1     BNZ 0x7C
156:           
157:                       //load a new byte into memory
158:                       INCF FSR0, 1, ACCESS //1
00BA  2AE9     INCF FSR0L, F, ACCESS
159:                       MOVF INDF0, 0, ACCESS //1
00BC  50EF     MOVF INDF0, W, ACCESS
160:                       MOVWF RXB1D7, ACCESS //1
00BE  6E3D     MOVWF 0x3D, ACCESS
161:           
162:                       //CURRENT BIT
163:                       MOVLW  8//1
00C0  0E08     MOVLW 0x8
164:                       MOVWF RXB1D6, ACCESS //1
00C2  6E3C     MOVWF 0x3C, ACCESS
165:           
166:                       //decrement component count
167:                       DECF RXB1D5, 1, ACCESS //1
00C4  063B     DECF 0x3B, F, ACCESS
168:                       BNZ timerWaitLoop2
00C6  E1DA     BNZ 0x7C
169:           
170:                       MOVLW  3//1
00C8  0E03     MOVLW 0x3
171:                       MOVWF RXB1D5, ACCESS //1
00CA  6E3B     MOVWF 0x3B, ACCESS
172:           
173:                       //decrement LED count
174:                       DECF RXB1D4, 1, ACCESS //1
00CC  063A     DECF 0x3A, F, ACCESS
175:                       BNZ timerWaitLoop2
00CE  E1D6     BNZ 0x7C
176:           
177:                   done:
178:                   
179:                   //################### ASM RESET ##############
180:                   // sents a reset to the LED strip
181:                   // a reset is a low for t > 50 microseconds
182:                   asm_reset:
183:                       BCF PORTB, 0, ACCESS //1
00D0  9081     BCF PORTB, 0, ACCESS
184:           
185:                       MOVLW 135 //1
00D2  0E87     MOVLW 0x87
186:                   loop:
187:                       ADDLW -1 //1
00D4  0FFF     ADDLW 0xFF
188:                       BNZ loop //1 if false, 2 if true
00D6  E1FE     BNZ 0xD4
189:           
190:               _endasm
191:           }
00D8  0012     RETURN 0
192:           
193:           void delay(void) {
194:               Delay10KTCYx(254);
00DA  0EFE     MOVLW 0xFE
00DC  6EE6     MOVWF POSTINC1, ACCESS
00DE  ECC2     CALL 0x184, 0
00E0  F000     NOP
00E2  52E5     MOVF POSTDEC1, F, ACCESS
195:           }
00E4  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/stdclib/__init.c  -----------------------------------------------------
01EE  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/startup/c018i.c  ------------------------------------------------------
0000  EFE9     GOTO 0x1D2
0002  F000     NOP
0004  0012     RETURN 0
01D2  EE1D     LFSR 1, 0xD00
01D4  F000     NOP
01D6  EE2D     LFSR 2, 0xD00
01D8  F000     NOP
01DA  6AF8     CLRF TBLPTRU, ACCESS
01DC  9C01     BCF i, 6, ACCESS
01DE  EC73     CALL 0xE6, 0
01E0  F000     NOP
01E2  ECF7     CALL 0x1EE, 0
01E4  F000     NOP
01E6  EC0A     CALL 0x14, 0
01E8  F000     NOP
01EA  D7FB     BRA 0x1E2
01EC  0012     RETURN 0
00E6  0E06     MOVLW 0x6
00E8  6EF6     MOVWF TBLPTRL, ACCESS
00EA  0E00     MOVLW 0x0
00EC  6EF7     MOVWF TBLPTRH, ACCESS
00EE  0E00     MOVLW 0x0
00F0  6EF8     MOVWF TBLPTRU, ACCESS
00F2  010E     MOVLB 0xE
00F4  0009     TBLRD*+
00F6  50F5     MOVF TABLAT, W, ACCESS
00F8  6F05     MOVWF 0x5, BANKED
00FA  0009     TBLRD*+
00FC  50F5     MOVF TABLAT, W, ACCESS
00FE  6F06     MOVWF 0x6, BANKED
0100  E103     BNZ 0x108
0102  6705     TSTFSZ 0x5, BANKED
0104  D001     BRA 0x108
0106  D03D     BRA 0x182
0108  0009     TBLRD*+
010A  50F5     MOVF TABLAT, W, ACCESS
010C  6F00     MOVWF val, BANKED
010E  0009     TBLRD*+
0110  50F5     MOVF TABLAT, W, ACCESS
0112  6F01     MOVWF i, BANKED
0114  0009     TBLRD*+
0116  50F5     MOVF TABLAT, W, ACCESS
0118  6F02     MOVWF DelayCounter2, BANKED
011A  0009     TBLRD*+
011C  0009     TBLRD*+
011E  50F5     MOVF TABLAT, W, ACCESS
0120  6EE9     MOVWF FSR0L, ACCESS
0122  0009     TBLRD*+
0124  50F5     MOVF TABLAT, W, ACCESS
0126  6EEA     MOVWF FSR0H, ACCESS
0128  0009     TBLRD*+
012A  0009     TBLRD*+
012C  0009     TBLRD*+
012E  50F5     MOVF TABLAT, W, ACCESS
0130  6F03     MOVWF DelayCounter1, BANKED
0132  0009     TBLRD*+
0134  50F5     MOVF TABLAT, W, ACCESS
0136  6F04     MOVWF 0x4, BANKED
0138  0009     TBLRD*+
013A  0009     TBLRD*+
013C  CFF6     MOVFF TBLPTRL, data_ptr
013E  FE07     NOP
0140  CFF7     MOVFF TBLPTRH, 0xE08
0142  FE08     NOP
0144  CFF8     MOVFF TBLPTRU, 0xE09
0146  FE09     NOP
0148  CE00     MOVFF prom, TBLPTRL
014A  FFF6     NOP
014C  CE01     MOVFF 0xE01, TBLPTRH
014E  FFF7     NOP
0150  CE02     MOVFF 0xE02, TBLPTRU
0152  FFF8     NOP
0154  010E     MOVLB 0xE
0156  5303     MOVF DelayCounter1, F, BANKED
0158  E102     BNZ 0x15E
015A  5304     MOVF 0x4, F, BANKED
015C  E007     BZ 0x16C
015E  0009     TBLRD*+
0160  50F5     MOVF TABLAT, W, ACCESS
0162  6EEE     MOVWF POSTINC0, ACCESS
0164  0703     DECF DelayCounter1, F, BANKED
0166  E2F8     BC 0x158
0168  0704     DECF 0x4, F, BANKED
016A  D7F9     BRA 0x15E
016C  CE07     MOVFF data_ptr, TBLPTRL
016E  FFF6     NOP
0170  CE08     MOVFF 0xE08, TBLPTRH
0172  FFF7     NOP
0174  CE09     MOVFF 0xE09, TBLPTRU
0176  FFF8     NOP
0178  010E     MOVLB 0xE
017A  0705     DECF 0x5, F, BANKED
017C  0E00     MOVLW 0x0
017E  5B06     SUBWFB 0x6, F, BANKED
0180  D7BF     BRA 0x100
0182  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/proc/p18F25K80.asm  ---------------------------------------------------
01B2  0E41     MOVLW 0x41
01B4  6EF3     MOVWF PRODL, ACCESS
01B6  EE00     LFSR 0, 0x0
01B8  F000     NOP
01BA  0E0E     MOVLW 0xE
01BC  D801     RCALL zero_block
01BE  0012     RETURN 0
01C0  60EA     CPFSLT FSR0H, ACCESS
01C2  D002     BRA compare_l
01C4  6AEE     CLRF POSTINC0, ACCESS
01C6  D7FC     BRA zero_block
01C8  50F3     MOVF PRODL, W, ACCESS
01CA  60E9     CPFSLT FSR0L, ACCESS
01CC  0012     RETURN 0
01CE  6AEE     CLRF POSTINC0, ACCESS
01D0  D7FC     BRA loop_l
---  /MCC18/v3_39/src/traditional/delays/d10ktcyx.asm  --------------------------------------------------
0184  0EFF     MOVLW 0xFF
0186  50E3     MOVF PLUSW1, W, ACCESS
0188  6E03     MOVWF DelayCounter1, ACCESS
018A  0EEF     MOVLW 0xEF
018C  D001     BRA D10K_1
018E  0EF3     MOVLW 0xF3
0190  6EE7     MOVWF INDF1, ACCESS
0192  2EE7     DECFSZ INDF1, F, ACCESS
0194  EFC9     GOTO 0x192
0196  F000     NOP
0198  0E0C     MOVLW 0xC
019A  6E02     MOVWF DelayCounter2, ACCESS
019C  6AE7     CLRF INDF1, ACCESS
019E  2EE7     DECFSZ INDF1, F, ACCESS
01A0  EFCF     GOTO 0x19E
01A2  F000     NOP
01A4  2E02     DECFSZ DelayCounter2, F, ACCESS
01A6  EFCE     GOTO 0x19C
01A8  F000     NOP
01AA  2E03     DECFSZ DelayCounter1, F, ACCESS
01AC  EFC7     GOTO 0x18E
01AE  F000     NOP
01B0  0012     RETURN 0
