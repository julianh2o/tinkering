Disassembly Listing for pic18f25k80
Generated From:
/Users/julian/Documents/Programming/tinkering/pic18f25k80.X/dist/default/production/pic18f25k80.X.production.cof
Aug 1, 2013 10:52:59 PM

---  /Users/julian/Documents/Programming/tinkering/pic18f25k80.X/serlcd.c  ------------------------------
1:             #include <p18F25K80.h>
2:             #include "serlcd.h"
3:             
4:             const int SPBRG_value = ((FOSC/LCD_BAUD)/16)-1;
5:             //const int SPBRG_value = ((FOSC/LCD_BAUD)/64)-1;
6:             
7:             void setupLCD(void) {
8:                 //setup lcd
9:                 //turn the ports on
10:                TRISCbits.TRISC6 = 1;
0014  8C94     BSF TRISC, 6, ACCESS
11:                RCSTA1bits.SPEN = 1;
0016  8EAB     BSF RCSTA1, 7, ACCESS
12:                TXSTA1bits.TXEN = 1;
0018  8AAC     BSF TXSTA1, 5, ACCESS
13:            
14:                TXSTA1bits.SYNC = 0;
001A  98AC     BCF TXSTA1, 4, ACCESS
15:                BAUDCON1bits.BRG16 = 0;
001C  96A7     BCF BAUDCON1, 3, ACCESS
16:                TXSTA1bits.BRGH = 1 ;
001E  84AC     BSF TXSTA1, 2, ACCESS
17:                //TXSTA1bits.BRGH = 0;
18:                
19:                SPBRG1 = SPBRG_value;
0020  CE0A     MOVFF SPBRG_value, SPBRG1
0022  FFAF     NOP
20:                //SPBRG1 = 104;
21:                //setup lcd
22:            }
0024  0012     RETURN 0
23:            
24:            void sendCommand(char byte) {
0026  D8A9     RCALL __pa_1
25:                sendByte(0xFE); //control character
0028  0EFE     MOVLW 0xFE
002A  6EE6     MOVWF POSTINC1, ACCESS
002C  D805     RCALL sendByte
002E  52E5     MOVF POSTDEC1, F, ACCESS
26:                sendByte(byte); //control character
0030  0EFE     MOVLW 0xFE
0032  CFDB     MOVFF PLUSW2, POSTINC1
0034  FFE6     NOP
0036  D0A6     BRA __pa_2
0184  DF59     RCALL sendByte
0186  52E5     MOVF POSTDEC1, F, ACCESS
27:            }
0188  D00E     BRA __pa_5
01A6  52E5     MOVF POSTDEC1, F, ACCESS
01A8  CFE7     MOVFF INDF1, FSR2L
01AA  FFD9     NOP
01AC  0012     RETURN 0
28:            
29:            void sendByte(char byte) {
0038  CFD9     MOVFF FSR2L, POSTINC1
003A  FFE6     NOP
003C  CFE1     MOVFF FSR1L, FSR2L
003E  FFD9     NOP
30:                TXREG1 = byte;
0040  0EFE     MOVLW 0xFE
0042  50DB     MOVF PLUSW2, W, ACCESS
0044  6EAD     MOVWF TXREG1, ACCESS
31:                while(!TXSTA1bits.TRMT) Nop();
0046  B2AC     BTFSC TXSTA1, 1, ACCESS
0048  D002     BRA 0x4E
004A  0000     NOP
004C  D7FC     BRA 0x46
32:            }
004E  52E5     MOVF POSTDEC1, F, ACCESS
0050  CFE7     MOVFF INDF1, FSR2L
0052  FFD9     NOP
0054  0012     RETURN 0
33:            
34:            void sendLiteralBytes(rom const char * bytes) {
0056  D891     RCALL __pa_1
35:                while(*bytes) {
0058  0EFD     MOVLW 0xFD
005A  CFDB     MOVFF PLUSW2, TBLPTRL
005C  FFF6     NOP
005E  0EFE     MOVLW 0xFE
0060  CFDB     MOVFF PLUSW2, TBLPTRH
0062  FFF7     NOP
0064  0008     TBLRD*
0066  50F5     MOVF TABLAT, W, ACCESS
0068  E00F     BZ 0x88
0086  D7E8     BRA 0x58
36:                    sendByte(*bytes++);
006A  0EFD     MOVLW 0xFD
006C  CFDB     MOVFF PLUSW2, TBLPTRL
006E  FFF6     NOP
0070  2ADB     INCF PLUSW2, F, ACCESS
0072  0EFE     MOVLW 0xFE
0074  CFDB     MOVFF PLUSW2, TBLPTRH
0076  FFF7     NOP
0078  E301     BNC 0x7C
007A  2ADB     INCF PLUSW2, F, ACCESS
007C  0008     TBLRD*
007E  50F5     MOVF TABLAT, W, ACCESS
0080  6EE6     MOVWF POSTINC1, ACCESS
0082  DFDA     RCALL sendByte
0084  52E5     MOVF POSTDEC1, F, ACCESS
37:                }
38:            }
0088  D08E     BRA __pa_5
39:            
40:            void sendDigit(unsigned char digit) {
008A  D877     RCALL __pa_1
41:                if (digit >= 10)
008C  0E0A     MOVLW 0xA
008E  6EF3     MOVWF PRODL, ACCESS
0090  0EFE     MOVLW 0xFE
0092  CFDB     MOVFF PLUSW2, PRODH
0094  FFF4     NOP
0096  50F3     MOVF PRODL, W, ACCESS
0098  5CF4     SUBWF PRODH, W, ACCESS
009A  E304     BNC 0xA4
42:                    sendByte(digit + 65);
009C  0EFE     MOVLW 0xFE
009E  50DB     MOVF PLUSW2, W, ACCESS
00A0  0F41     ADDLW 0x41
43:                else
00A2  D003     BRA 0xAA
44:                    sendByte(digit + 48);
00A4  0EFE     MOVLW 0xFE
00A6  50DB     MOVF PLUSW2, W, ACCESS
00A8  0F30     ADDLW 0x30
00AA  6EE6     MOVWF POSTINC1, ACCESS
00AC  D06B     BRA __pa_2
45:            }
46:            
47:            void sendCharAsBase(unsigned char num, unsigned char base) {
00AE  D865     RCALL __pa_1
00B0  0E0B     MOVLW 0xB
00B2  26E1     ADDWF FSR1L, F, ACCESS
48:                char quotient;
49:                char remainder;
50:                char i = 0;
00B4  0E02     MOVLW 0x2
00B6  6ADB     CLRF PLUSW2, ACCESS
51:                char digits[8];
52:                
53:                while(1) {
54:                    quotient = num / base;
00B8  0EFD     MOVLW 0xFD
00BA  CFDB     MOVFF PLUSW2, __tmp_0
00BC  F010     NOP
00BE  C010     MOVFF __tmp_0, 0xC
00C0  F00C     NOP
00C2  0EFE     MOVLW 0xFE
00C4  CFDB     MOVFF PLUSW2, 0x7
00C6  F007     NOP
00C8  EC84     CALL 0x308, 0
00CA  F001     NOP
00CC  5007     MOVF 0x7, W, ACCESS
00CE  6EDF     MOVWF INDF2, ACCESS
55:                    remainder = num - quotient*base;
00D0  0EFE     MOVLW 0xFE
00D2  CFDB     MOVFF PLUSW2, POSTINC1
00D4  FFE6     NOP
00D6  0EFD     MOVLW 0xFD
00D8  50DB     MOVF PLUSW2, W, ACCESS
00DA  02DF     MULWF INDF2, ACCESS
00DC  50F3     MOVF PRODL, W, ACCESS
00DE  52E5     MOVF POSTDEC1, F, ACCESS
00E0  5CE7     SUBWF INDF1, W, ACCESS
00E2  6EE7     MOVWF INDF1, ACCESS
00E4  0E01     MOVLW 0x1
00E6  CFE7     MOVFF INDF1, PLUSW2
00E8  FFDB     NOP
56:                    num = quotient;
00EA  0EFE     MOVLW 0xFE
00EC  CFDF     MOVFF INDF2, PLUSW2
00EE  FFDB     NOP
57:            
58:                    digits[i++] = remainder;
00F0  D84C     RCALL __pa_3
00F2  CFDB     MOVFF PLUSW2, PRODL
00F4  FFF3     NOP
00F6  2ADB     INCF PLUSW2, F, ACCESS
00F8  50F3     MOVF PRODL, W, ACCESS
00FA  6E12     MOVWF 0x12, ACCESS
00FC  6A13     CLRF 0x13, ACCESS
00FE  BE12     BTFSC 0x12, 7, ACCESS
0100  6813     SETF 0x13, ACCESS
0102  D84A     RCALL __pa_4
0104  0E01     MOVLW 0x1
0106  CFDB     MOVFF PLUSW2, INDF0
0108  FFEF     NOP
018A  50D9     MOVF FSR2L, W, ACCESS
018C  0F03     ADDLW 0x3
018E  6E10     MOVWF __tmp_0, ACCESS
0190  CFDA     MOVFF FSR2H, 0x11
0192  F011     NOP
0194  0E02     MOVLW 0x2
0196  0012     RETURN 0
0198  5010     MOVF __tmp_0, W, ACCESS
019A  2412     ADDWF 0x12, W, ACCESS
019C  6EE9     MOVWF FSR0L, ACCESS
019E  5011     MOVF 0x11, W, ACCESS
01A0  2013     ADDWFC 0x13, W, ACCESS
01A2  6EEA     MOVWF FSR0H, ACCESS
01A4  0012     RETURN 0
59:            
60:                    if (quotient == 0) break;
010A  50DF     MOVF INDF2, W, ACCESS
010C  E1D5     BNZ 0xB8
61:                }
62:            
63:                while (i != 0) {
010E  0E02     MOVLW 0x2
0110  50DB     MOVF PLUSW2, W, ACCESS
0112  E00D     BZ 0x12E
012C  D7F0     BRA 0x10E
64:                    sendDigit(digits[--i]);
0114  D83A     RCALL __pa_3
0116  06DB     DECF PLUSW2, F, ACCESS
0118  CFDB     MOVFF PLUSW2, 0x12
011A  F012     NOP
011C  6A13     CLRF 0x13, ACCESS
011E  BE12     BTFSC 0x12, 7, ACCESS
0120  6813     SETF 0x13, ACCESS
0122  D83A     RCALL __pa_4
0124  50EF     MOVF INDF0, W, ACCESS
0126  6EE6     MOVWF POSTINC1, ACCESS
0128  DFB0     RCALL sendDigit
012A  52E5     MOVF POSTDEC1, F, ACCESS
65:                }
66:            }
012E  0E0B     MOVLW 0xB
0130  5CE1     SUBWF FSR1L, W, ACCESS
0132  E202     BC 0x138
0134  6AE1     CLRF FSR1L, ACCESS
0136  52E5     MOVF POSTDEC1, F, ACCESS
0138  6EE1     MOVWF FSR1L, ACCESS
013A  D035     BRA __pa_5
67:            
68:            void sendDec(unsigned char num) {
013C  D81E     RCALL __pa_1
69:                sendCharAsBase(num,10);
013E  0E0A     MOVLW 0xA
0140  D014     BRA __pa_0
70:            }
71:            
72:            void sendHex(unsigned char num) {
0142  D81B     RCALL __pa_1
73:                sendLiteralBytes("0x");
0144  0E27     MOVLW 0x27
0146  6EE6     MOVWF POSTINC1, ACCESS
0148  0E03     MOVLW 0x3
014A  6EE6     MOVWF POSTINC1, ACCESS
014C  DF84     RCALL sendLiteralBytes
014E  52E5     MOVF POSTDEC1, F, ACCESS
0150  52E5     MOVF POSTDEC1, F, ACCESS
74:                sendCharAsBase(num,16);
0152  0E10     MOVLW 0x10
0154  D00A     BRA __pa_0
75:            }
76:            
77:            void sendBin(unsigned char num) {
0156  D811     RCALL __pa_1
017A  CFD9     MOVFF FSR2L, POSTINC1
017C  FFE6     NOP
017E  CFE1     MOVFF FSR1L, FSR2L
0180  FFD9     NOP
0182  0012     RETURN 0
78:                sendLiteralBytes("0b");
0158  0E24     MOVLW 0x24
015A  6EE6     MOVWF POSTINC1, ACCESS
015C  0E03     MOVLW 0x3
015E  6EE6     MOVWF POSTINC1, ACCESS
0160  DF7A     RCALL sendLiteralBytes
0162  52E5     MOVF POSTDEC1, F, ACCESS
0164  52E5     MOVF POSTDEC1, F, ACCESS
79:                sendCharAsBase(num,2);
0166  0E02     MOVLW 0x2
0168  D000     BRA __pa_0
016A  6EE6     MOVWF POSTINC1, ACCESS
016C  0EFE     MOVLW 0xFE
016E  CFDB     MOVFF PLUSW2, POSTINC1
0170  FFE6     NOP
0172  DF9D     RCALL sendCharAsBase
0174  52E5     MOVF POSTDEC1, F, ACCESS
0176  52E5     MOVF POSTDEC1, F, ACCESS
80:            }
0178  D016     BRA __pa_5
---  /Users/julian/Documents/Programming/tinkering/pic18f25k80.X/lcdtest.c  -----------------------------
1:             #include "config.h"
2:             #include "constants.h"
3:             #include <delays.h>
4:             #include "serlcd.h"
5:             
6:             #define STATUS_TRIS TRISCbits.TRISC0
7:             #define STATUS_LED PORTCbits.RC0
8:             
9:             void delay(void);
10:            
11:            void main(void) {
024C  CFD9     MOVFF FSR2L, POSTINC1
024E  FFE6     NOP
0250  CFE1     MOVFF FSR1L, FSR2L
0252  FFD9     NOP
0254  0E02     MOVLW 0x2
0256  26E1     ADDWF FSR1L, F, ACCESS
12:                char val;
13:                char i;
14:            
15:                STATUS_TRIS = OUTPUT;
0258  9094     BCF TRISC, 0, ACCESS
16:                STATUS_LED = 0;
025A  9082     BCF PORTC, 0, ACCESS
17:            
18:                //setup internal oscillator
19:                OSCCONbits.IRCF = 0b111; //sets internal osc to 111=16mhz, 110=8mhz
025C  0E8F     MOVLW 0x8F
025E  14D3     ANDWF OSCCON, W, ACCESS
0260  0970     IORLW 0x70
0262  6ED3     MOVWF OSCCON, ACCESS
20:                OSCCONbits.SCS = 0b00;
0264  0EFC     MOVLW 0xFC
0266  14D3     ANDWF OSCCON, W, ACCESS
0268  0900     IORLW 0x0
026A  6ED3     MOVWF OSCCON, ACCESS
21:                OSCTUNEbits.PLLEN = 0b0; //1=pllx4 enabled
026C  9C9B     BCF OSCTUNE, 6, ACCESS
22:            
23:                setupLCD();
026E  EC0A     CALL 0x14, 0
0270  F000     NOP
24:                sendCommand(0x01);
0272  0E01     MOVLW 0x1
0274  6EE6     MOVWF POSTINC1, ACCESS
0276  EC13     CALL 0x26, 0
0278  F000     NOP
027A  52E5     MOVF POSTDEC1, F, ACCESS
25:                sendLiteralBytes("Hello World!");
027C  0E2A     MOVLW 0x2A
027E  6EE6     MOVWF POSTINC1, ACCESS
0280  0E03     MOVLW 0x3
0282  6EE6     MOVWF POSTINC1, ACCESS
0284  EC2B     CALL 0x56, 0
0286  F000     NOP
0288  52E5     MOVF POSTDEC1, F, ACCESS
028A  52E5     MOVF POSTDEC1, F, ACCESS
26:            
27:                while(1) {
0290  D7FD     BRA 0x28C
28:                    STATUS_LED = !STATUS_LED;
028C  7082     BTG PORTC, 0, ACCESS
29:                    delay();
028E  D801     RCALL delay
30:                }
31:            }
32:            
33:            void delay(void) {
34:                Delay10KTCYx(254);
0292  0EFE     MOVLW 0xFE
0294  6EE6     MOVWF POSTINC1, ACCESS
0296  EC4F     CALL 0x29E, 0
0298  F001     NOP
029A  52E5     MOVF POSTDEC1, F, ACCESS
35:            }
029C  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/stdclib/__init.c  -----------------------------------------------------
0338  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/startup/c018i.c  ------------------------------------------------------
0000  EF76     GOTO 0x2EC
0002  F001     NOP
0004  0012     RETURN 0
02EC  EE1D     LFSR 1, 0xD00
02EE  F000     NOP
02F0  EE2D     LFSR 2, 0xD00
02F2  F000     NOP
02F4  6AF8     CLRF TBLPTRU, ACCESS
02F6  9C0F     BCF 0xF, 6, ACCESS
02F8  ECD7     CALL 0x1AE, 0
02FA  F000     NOP
02FC  EC9C     CALL 0x338, 0
02FE  F001     NOP
0300  EC26     CALL 0x24C, 0
0302  F001     NOP
0304  D7FB     BRA 0x2FC
0306  0012     RETURN 0
01AE  0E06     MOVLW 0x6
01B0  6EF6     MOVWF TBLPTRL, ACCESS
01B2  0E00     MOVLW 0x0
01B4  6EF7     MOVWF TBLPTRH, ACCESS
01B6  0E00     MOVLW 0x0
01B8  6EF8     MOVWF TBLPTRU, ACCESS
01BA  010E     MOVLB 0xE
01BC  0009     TBLRD*+
01BE  50F5     MOVF TABLAT, W, ACCESS
01C0  6F05     MOVWF 0x5, BANKED
01C2  0009     TBLRD*+
01C4  50F5     MOVF TABLAT, W, ACCESS
01C6  6F06     MOVWF 0x6, BANKED
01C8  E103     BNZ 0x1D0
01CA  6705     TSTFSZ 0x5, BANKED
01CC  D001     BRA 0x1D0
01CE  D03D     BRA 0x24A
01D0  0009     TBLRD*+
01D2  50F5     MOVF TABLAT, W, ACCESS
01D4  6F00     MOVWF val, BANKED
01D6  0009     TBLRD*+
01D8  50F5     MOVF TABLAT, W, ACCESS
01DA  6F01     MOVWF i, BANKED
01DC  0009     TBLRD*+
01DE  50F5     MOVF TABLAT, W, ACCESS
01E0  6F02     MOVWF i, BANKED
01E2  0009     TBLRD*+
01E4  0009     TBLRD*+
01E6  50F5     MOVF TABLAT, W, ACCESS
01E8  6EE9     MOVWF FSR0L, ACCESS
01EA  0009     TBLRD*+
01EC  50F5     MOVF TABLAT, W, ACCESS
01EE  6EEA     MOVWF FSR0H, ACCESS
01F0  0009     TBLRD*+
01F2  0009     TBLRD*+
01F4  0009     TBLRD*+
01F6  50F5     MOVF TABLAT, W, ACCESS
01F8  6F03     MOVWF digits, BANKED
01FA  0009     TBLRD*+
01FC  50F5     MOVF TABLAT, W, ACCESS
01FE  6F04     MOVWF 0x4, BANKED
0200  0009     TBLRD*+
0202  0009     TBLRD*+
0204  CFF6     MOVFF TBLPTRL, data_ptr
0206  FE07     NOP
0208  CFF7     MOVFF TBLPTRH, 0xE08
020A  FE08     NOP
020C  CFF8     MOVFF TBLPTRU, 0xE09
020E  FE09     NOP
0210  CE00     MOVFF prom, TBLPTRL
0212  FFF6     NOP
0214  CE01     MOVFF 0xE01, TBLPTRH
0216  FFF7     NOP
0218  CE02     MOVFF 0xE02, TBLPTRU
021A  FFF8     NOP
021C  010E     MOVLB 0xE
021E  5303     MOVF digits, F, BANKED
0220  E102     BNZ 0x226
0222  5304     MOVF 0x4, F, BANKED
0224  E007     BZ 0x234
0226  0009     TBLRD*+
0228  50F5     MOVF TABLAT, W, ACCESS
022A  6EEE     MOVWF POSTINC0, ACCESS
022C  0703     DECF digits, F, BANKED
022E  E2F8     BC 0x220
0230  0704     DECF 0x4, F, BANKED
0232  D7F9     BRA 0x226
0234  CE07     MOVFF data_ptr, TBLPTRL
0236  FFF6     NOP
0238  CE08     MOVFF 0xE08, TBLPTRH
023A  FFF7     NOP
023C  CE09     MOVFF 0xE09, TBLPTRU
023E  FFF8     NOP
0240  010E     MOVLB 0xE
0242  0705     DECF 0x5, F, BANKED
0244  0E00     MOVLW 0x0
0246  5B06     SUBWFB 0x6, F, BANKED
0248  D7BF     BRA 0x1C8
024A  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/proc/p18F25K80.asm  ---------------------------------------------------
02CC  0E41     MOVLW 0x41
02CE  6EF3     MOVWF PRODL, ACCESS
02D0  EE00     LFSR 0, 0x0
02D2  F000     NOP
02D4  0E0E     MOVLW 0xE
02D6  D801     RCALL zero_block
02D8  0012     RETURN 0
02DA  60EA     CPFSLT FSR0H, ACCESS
02DC  D002     BRA compare_l
02DE  6AEE     CLRF POSTINC0, ACCESS
02E0  D7FC     BRA zero_block
02E2  50F3     MOVF PRODL, W, ACCESS
02E4  60E9     CPFSLT FSR0L, ACCESS
02E6  0012     RETURN 0
02E8  6AEE     CLRF POSTINC0, ACCESS
02EA  D7FC     BRA loop_l
---  /MCC18/v3_39/src/traditional/math/fxd0808u.c  ------------------------------------------------------
0308  6A03     CLRF digits, ACCESS
030A  0E08     MOVLW 0x8
030C  6EE7     MOVWF INDF1, ACCESS
030E  90D8     BCF STATUS, 0, ACCESS
0310  3607     RLCF 0x7, F, ACCESS
0312  3603     RLCF digits, F, ACCESS
0314  500C     MOVF 0xC, W, ACCESS
0316  5C03     SUBWF digits, W, ACCESS
0318  E302     BNC 0x31E
031A  6E03     MOVWF digits, ACCESS
031C  2A07     INCF 0x7, F, ACCESS
031E  2EE7     DECFSZ INDF1, F, ACCESS
0320  D7F7     BRA 0x310
0322  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/delays/d10ktcyx.asm  --------------------------------------------------
029E  0EFF     MOVLW 0xFF
02A0  50E3     MOVF PLUSW1, W, ACCESS
02A2  6E15     MOVWF DelayCounter1, ACCESS
02A4  0EEF     MOVLW 0xEF
02A6  D001     BRA D10K_1
02A8  0EF3     MOVLW 0xF3
02AA  6EE7     MOVWF INDF1, ACCESS
02AC  2EE7     DECFSZ INDF1, F, ACCESS
02AE  EF56     GOTO 0x2AC
02B0  F001     NOP
02B2  0E0C     MOVLW 0xC
02B4  6E14     MOVWF DelayCounter2, ACCESS
02B6  6AE7     CLRF INDF1, ACCESS
02B8  2EE7     DECFSZ INDF1, F, ACCESS
02BA  EF5C     GOTO 0x2B8
02BC  F001     NOP
02BE  2E14     DECFSZ DelayCounter2, F, ACCESS
02C0  EF5B     GOTO 0x2B6
02C2  F001     NOP
02C4  2E15     DECFSZ DelayCounter1, F, ACCESS
02C6  EF54     GOTO 0x2A8
02C8  F001     NOP
02CA  0012     RETURN 0
