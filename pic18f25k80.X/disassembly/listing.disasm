Disassembly Listing for pic18f25k80
Generated From:
/Users/julian/Documents/Programming/tinkering/pic18f25k80.X/dist/default/production/pic18f25k80.X.production.cof
Jul 21, 2013 9:11:51 PM

---  /Users/julian/Documents/Programming/tinkering/pic18f25k80.X/ledmain.c  -----------------------------
1:             #include "config.h"
2:             #include "constants.h"
3:             #include <p18F25K80.h>
4:             #include <delays.h>
5:             
6:             #define STRIP_DATA_TRIS TRISBbits.TRISB0
7:             #define STRIP_DATA PORTBbits.RB0
8:             
9:             #define STATUS_TRIS TRISBbits.TRISB1
10:            #define STATUS_LED PORTBbits.RB1
11:            
12:            void delay(void);
13:            
14:            void setLEDs();
15:            void sendBatch(char * ptr, char len);
16:            void sendReset();
17:            
18:            #define STRIP_LENGTH 125
19:            #define DATA_SIZE 375
20:            
21:            //RAINBOW
22:            #pragma idata large_idata
23:            char rainbow[DATA_SIZE] = {0,15,0,0,15,0,1,15,0,2,15,0,3,15,0,3,15,0,4,15,0,5,15,0,6,15,0,6,15,0,7,15,0,8,15,0,9,15,0,9,15,0,10,15,0,11,15,0,12,15,0,13,15,0,13,15,0,14,15,0,15,15,0,15,15,0,15,15,0,15,14,0,15,13,0,15,12,0,15,11,0,15,11,0,15,10,0,15,9,0,15,8,0,15,8,0,15,7,0,15,6,0,15,5,0,15,5,0,15,4,0,15,3,0,15,2,0,15,2,0,15,1,0,15,0,0,15,0,0,15,0,1,15,0,1,15,0,2,15,0,3,15,0,4,15,0,4,15,0,5,15,0,6,15,0,7,15,0,7,15,0,8,15,0,9,15,0,10,15,0,10,15,0,11,15,0,12,15,0,13,15,0,14,15,0,14,15,0,15,15,0,15,14,0,15,14,0,15,13,0,15,12,0,15,11,0,15,10,0,15,10,0,15,9,0,15,8,0,15,7,0,15,7,0,15,6,0,15,5,0,15,4,0,15,4,0,15,3,0,15,2,0,15,1,0,15,1,0,15,0,0,15,0,0,15,0,1,15,0,2,15,0,2,15,0,3,15,0,4,15,0,5,15,0,5,15,0,6,15,0,7,15,0,8,15,0,8,15,0,9,15,0,10,15,0,11,15,0,11,15,0,12,15,0,13,15,0,14,15,0,15,15,0,15,15,0,15,15,0,15,14,0,15,13,0,15,13,0,15,12,0,15,11,0,15,10,0,15,9,0,15,9,0,15,8,0,15,7,0,15,6,0,15,6,0,15,5,0,15,4,0,15,3,0,15,3,0,15,2,0,15,1,0,15,0};
24:            //char led_buffer[DATA_SIZE] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
25:            //char led_buffer[375] = {0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,30,30,30,31,31,31,32,32,32,33,33,33,34,34,34,35,35,35,36,36,36,37,37,37,38,38,38,39,39,39,40,40,40,41,41,41,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,47,47,47,48,48,48,49,49,49,50,50,50,51,51,51,52,52,52,53,53,53,54,54,54,55,55,55,56,56,56,57,57,57,58,58,58,59,59,59,60,60,60,61,61,61,62,62,62,63,63,63,64,64,64,65,65,65,66,66,66,67,67,67,68,68,68,69,69,69,70,70,70,71,71,71,72,72,72,73,73,73,74,74,74,75,75,75,76,76,76,77,77,77,78,78,78,79,79,79,80,80,80,81,81,81,82,82,82,83,83,83,84,84,84,85,85,85,86,86,86,87,87,87,88,88,88,89,89,89,90,90,90,91,91,91,92,92,92,93,93,93,94,94,94,95,95,95,96,96,96,97,97,97,98,98,98,99,99,99,100,100,100,101,101,101,102,102,102,103,103,103,104,104,104,105,105,105,106,106,106,107,107,107,108,108,108,109,109,109,110,110,110,111,111,111,112,112,112,113,113,113,114,114,114,115,115,115,116,116,116,117,117,117,118,118,118,119,119,119,120,120,120,121,121,121,122,122,122,123,123,123,0,0,150};
26:            //char led_buffer[375] = {10,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,10,0,0,0,0,0,0,0,0,0,0,0,0};
27:            //char led_buffer[375] = {1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0};
28:            char led_buffer[375] = {1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0};
29:            #pragma idata
30:            
31:            //const char led_buffer[DATA_SIZE_1+1] = {0,15,0,0,15,0,1,15,0,2,15,0,3,15,0,3,15,0,4,15,0,5,15,0,6,15,0,6,15,0,7,15,0,8,15,0,9,15,0,9,15,0,10,15,0,11,15,0,12,15,0,13,15,0,13,15,0,14,15,0,15,15,0,15,15,0,15,15,0,15,14,0,15,13,0,15,12,0,15,11,0,15,11,0,15,10,0,15,9,0,15,8,0,15,8,0,15,7,0,15,6,0,15,5,0,15,5,0,15,4,0,15,3,0,15,2,0,15,2,0,15,1,0,15,0,0,15,0,0,15,0,1,15,0,1,15,0,2,15,0,3,15,0,4,15,0,4,15,0,5,15,0,6,15,0,7,15,0,7,15,0,8,15,0,9,15,0,10,15,0,10,15,0,11,15,0,12,15,0,13,15,0,14,15,0,14,15,0,15,15,0,15,14,0,15,14,0,15,13,0,15,12,0,15,11,0,15,10,0,15,10,0,15,9,0,15,8,0,15,7,0,15,7,0,15,6,0,15,5,0,15,4,0,15,4,0,15,3,0,15,2,0,15,1,0,15,1,0,15,0,0,15,0,0,15,0};
32:            
33:            //BLUE EVERY 10
34:            //const char led_buffer[DATA_SIZE_1] = {0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0};
35:            
36:            //char * ledPointer;
37:            //char * rainbowPointer;
38:            
39:            void main(void) {
0014  CFD9     MOVFF FSR2L, POSTINC1
0016  FFE6     NOP
0018  CFE1     MOVFF FSR1L, FSR2L
001A  FFD9     NOP
001C  0E06     MOVLW 0x6
001E  26E1     ADDWF FSR1L, F, ACCESS
40:                short offset,i_strip,i_rainbow;
41:            
42:                //ledPointer = led_buffer;
43:                //rainbowPointer = rainbow;
44:                
45:                STRIP_DATA_TRIS = OUTPUT;
0020  9093     BCF TRISB, 0, ACCESS
46:                STATUS_TRIS = OUTPUT;
0022  9293     BCF TRISB, 1, ACCESS
47:                PORTBbits.RB2 = OUTPUT;
0024  9481     BCF PORTB, 2, ACCESS
48:            
49:                //setup 16mhz
50:                //OSCCONbits.IRCF = 0b111; //sets internal osc to 16Mhz
51:                //OSCCONbits.SCS = 0b11;  //select internal osc as main source (This may or may not be redundant, based on your config bits.  It's not clear to me.)
52:                //OSCTUNEbits.PLLEN = 0b0;
53:            
54:                //setup 32mhz
55:                OSCCONbits.IRCF = 0b110; //sets internal osc to 16Mhz
0026  0E8F     MOVLW 0x8F
0028  14D3     ANDWF OSCCON, W, ACCESS
002A  0960     IORLW 0x60
002C  6ED3     MOVWF OSCCON, ACCESS
56:                OSCCONbits.SCS = 0b00;  //select internal osc as main source (This may or may not be redundant, based on your config bits.  It's not clear to me.)
002E  0EFC     MOVLW 0xFC
0030  14D3     ANDWF OSCCON, W, ACCESS
0032  0900     IORLW 0x0
0034  6ED3     MOVWF OSCCON, ACCESS
57:                OSCTUNEbits.PLLEN = 0b1;
0036  8C9B     BSF OSCTUNE, 6, ACCESS
58:            
59:                INTCON2bits.RBPU = 0b0;
0038  9EF1     BCF INTCON2, 7, ACCESS
60:            
61:                while(1) {
003C  D7FE     BRA 0x3A
62:                    setLEDs();
003A  D865     RCALL setLEDs
63:                }
64:            
65:                offset = 0;
003E  6ADE     CLRF POSTINC2, ACCESS
0040  6ADD     CLRF POSTDEC2, ACCESS
66:                while(1) {
0104  D79C     BRA 0x3E
67:                    i_rainbow = offset;
0042  CFD9     MOVFF FSR2L, FSR0L
0044  FFE9     NOP
0046  CFDA     MOVFF FSR2H, FSR0H
0048  FFEA     NOP
004A  0E04     MOVLW 0x4
004C  CFEE     MOVFF POSTINC0, PLUSW2
004E  FFDB     NOP
0050  0E05     MOVLW 0x5
0052  CFED     MOVFF POSTDEC0, PLUSW2
0054  FFDB     NOP
68:                    for (i_strip=0; i_strip<STRIP_LENGTH; i_strip++) {
0056  0E02     MOVLW 0x2
0058  6ADB     CLRF PLUSW2, ACCESS
005A  0E03     MOVLW 0x3
005C  6ADB     CLRF PLUSW2, ACCESS
005E  0E02     MOVLW 0x2
0060  CFDB     MOVFF PLUSW2, __tmp_0
0062  F002     NOP
0064  0E03     MOVLW 0x3
0066  CFDB     MOVFF PLUSW2, 0x3
0068  F003     NOP
006A  90D8     BCF STATUS, 0, ACCESS
006C  5003     MOVF 0x3, W, ACCESS
006E  E604     BN 0x78
0070  0E7D     MOVLW 0x7D
0072  5C02     SUBWF __tmp_0, W, ACCESS
0074  0E00     MOVLW 0x0
0076  5803     SUBWFB 0x3, W, ACCESS
0078  E235     BC 0xE4
00D8  0E02     MOVLW 0x2
00DA  2ADB     INCF PLUSW2, F, ACCESS
00DC  0E03     MOVLW 0x3
00DE  E3BF     BNC 0x5E
00E0  2ADB     INCF PLUSW2, F, ACCESS
00E2  D7BD     BRA 0x5E
69:                        led_buffer[i_strip*3] = rainbow[i_rainbow*3];
007A  D8A9     RCALL __pa_1
007C  D89B     RCALL __pa_0
007E  D8AF     RCALL __pa_2
70:                        led_buffer[i_strip*3+1] = rainbow[i_rainbow*3+1];
0080  D8A6     RCALL __pa_1
0082  0E01     MOVLW 0x1
0084  26E9     ADDWF FSR0L, F, ACCESS
0086  0E00     MOVLW 0x0
0088  22EA     ADDWFC FSR0H, F, ACCESS
008A  D894     RCALL __pa_0
008C  0E01     MOVLW 0x1
008E  26E9     ADDWF FSR0L, F, ACCESS
0090  0E00     MOVLW 0x0
0092  22EA     ADDWFC FSR0H, F, ACCESS
0094  D8A4     RCALL __pa_2
01DE  0E77     MOVLW 0x77
01E0  26E9     ADDWF FSR0L, F, ACCESS
01E2  0E02     MOVLW 0x2
01E4  22EA     ADDWFC FSR0H, F, ACCESS
01E6  52E5     MOVF POSTDEC1, F, ACCESS
01E8  50E7     MOVF INDF1, W, ACCESS
01EA  6EEF     MOVWF INDF0, ACCESS
01EC  0012     RETURN 0
71:                        led_buffer[i_strip*3+2] = rainbow[i_rainbow*3+2];
0096  D89B     RCALL __pa_1
0098  0E02     MOVLW 0x2
009A  26E9     ADDWF FSR0L, F, ACCESS
009C  0E00     MOVLW 0x0
009E  22EA     ADDWFC FSR0H, F, ACCESS
00A0  D889     RCALL __pa_0
00A2  0E02     MOVLW 0x2
00A4  26E9     ADDWF FSR0L, F, ACCESS
00A6  0E00     MOVLW 0x0
00A8  22EA     ADDWFC FSR0H, F, ACCESS
00AA  D899     RCALL __pa_2
01B4  0E00     MOVLW 0x0
01B6  26E9     ADDWF FSR0L, F, ACCESS
01B8  0E01     MOVLW 0x1
01BA  22EA     ADDWFC FSR0H, F, ACCESS
01BC  50EF     MOVF INDF0, W, ACCESS
01BE  6EE6     MOVWF POSTINC1, ACCESS
01C0  0E02     MOVLW 0x2
01C2  CFDB     MOVFF PLUSW2, FSR0L
01C4  FFE9     NOP
01C6  0E03     MOVLW 0x3
01C8  CFDB     MOVFF PLUSW2, FSR0H
01CA  FFEA     NOP
01CC  D010     BRA __pa_3
01CE  0E04     MOVLW 0x4
01D0  CFDB     MOVFF PLUSW2, FSR0L
01D2  FFE9     NOP
01D4  0E05     MOVLW 0x5
01D6  CFDB     MOVFF PLUSW2, FSR0H
01D8  FFEA     NOP
01DA  0E03     MOVLW 0x3
01DC  D008     BRA __pa_3
01EE  02EA     MULWF FSR0H, ACCESS
01F0  CFF3     MOVFF PRODL, FSR0H
01F2  FFEA     NOP
01F4  02E9     MULWF FSR0L, ACCESS
01F6  CFF3     MOVFF PRODL, FSR0L
01F8  FFE9     NOP
01FA  50F4     MOVF PRODH, W, ACCESS
01FC  26EA     ADDWF FSR0H, F, ACCESS
01FE  0012     RETURN 0
72:                        i_rainbow++;
00AC  0E04     MOVLW 0x4
00AE  2ADB     INCF PLUSW2, F, ACCESS
00B0  0E05     MOVLW 0x5
00B2  E301     BNC 0xB6
00B4  2ADB     INCF PLUSW2, F, ACCESS
73:                        if (i_rainbow > STRIP_LENGTH) i_rainbow=0;
00B6  0E04     MOVLW 0x4
00B8  CFDB     MOVFF PLUSW2, __tmp_0
00BA  F002     NOP
00BC  0E05     MOVLW 0x5
00BE  CFDB     MOVFF PLUSW2, 0x3
00C0  F003     NOP
00C2  3403     RLCF 0x3, W, ACCESS
00C4  E209     BC 0xD8
00C6  5002     MOVF __tmp_0, W, ACCESS
00C8  087D     SUBLW 0x7D
00CA  0E00     MOVLW 0x0
00CC  5403     SUBFWB 0x3, W, ACCESS
00CE  E204     BC 0xD8
00D0  0E04     MOVLW 0x4
00D2  6ADB     CLRF PLUSW2, ACCESS
00D4  0E05     MOVLW 0x5
00D6  6ADB     CLRF PLUSW2, ACCESS
74:            
75:                    }
76:                    setLEDs();
00E4  D810     RCALL setLEDs
77:                    offset ++;
00E6  2ADF     INCF INDF2, F, ACCESS
00E8  0E01     MOVLW 0x1
00EA  E301     BNC 0xEE
00EC  2ADB     INCF PLUSW2, F, ACCESS
78:                    if (offset > STRIP_LENGTH) {
00EE  CFDE     MOVFF POSTINC2, __tmp_0
00F0  F002     NOP
00F2  CFDD     MOVFF POSTDEC2, 0x3
00F4  F003     NOP
00F6  3403     RLCF 0x3, W, ACCESS
00F8  E2A4     BC 0x42
00FA  5002     MOVF __tmp_0, W, ACCESS
00FC  087D     SUBLW 0x7D
00FE  0E00     MOVLW 0x0
0100  5403     SUBFWB 0x3, W, ACCESS
0102  E29F     BC 0x42
79:                        offset = 0;
80:                    }
81:                }
82:            }
83:            
84:            void setLEDs() {
85:                //sendReset();
86:                sendBatch(&led_buffer,STRIP_LENGTH);
0106  0E7D     MOVLW 0x7D
0108  6EE6     MOVWF POSTINC1, ACCESS
010A  0E77     MOVLW 0x77
010C  6EE6     MOVWF POSTINC1, ACCESS
010E  0E02     MOVLW 0x2
0110  6EE6     MOVWF POSTINC1, ACCESS
0112  D809     RCALL sendBatch
0114  52E5     MOVF POSTDEC1, F, ACCESS
0116  52E5     MOVF POSTDEC1, F, ACCESS
0118  52E5     MOVF POSTDEC1, F, ACCESS
87:                //sendReset();
88:            }
011A  0012     RETURN 0
89:            
90:            void sendReset() {
91:                _asm
92:                    //################### ASM RESET ##############
93:                    // sents a reset to the LED strip
94:                    // a reset is a low for t > 50 microseconds
95:                    asm_reset:
96:                        BCF PORTB, 0, ACCESS //1
011C  9081     BCF PORTB, 0, ACCESS
97:            
98:                        MOVLW 135 //1
011E  0E87     MOVLW 0x87
99:                    loop:
100:                       ADDLW -1 //1
0120  0FFF     ADDLW 0xFF
101:                       BNZ loop //1 if false, 2 if true
0122  E1FE     BNZ 0x120
102:           
103:               _endasm
104:           }
0124  0012     RETURN 0
105:           
106:           void sendBatch(char * ptr, char len) {
0126  CFD9     MOVFF FSR2L, POSTINC1
0128  FFE6     NOP
012A  CFE1     MOVFF FSR1L, FSR2L
012C  FFD9     NOP
107:                   _asm
108:                       //loop over elements
109:                       MOVLW  len//1
012E  0EFC     MOVLW 0xFC
110:                       MOVWF RXB1D4, ACCESS //1
0130  6E3A     MOVWF 0x3A, ACCESS
111:                       LFSR 0,led_buffer //1
0132  EE02     LFSR 0, 0x277
0134  F077     NOP
112:           
113:                   nextLED:
114:                       //loop over colors
115:                       MOVLW 3 //1
0136  0E03     MOVLW 0x3
116:                       MOVWF RXB1D5, ACCESS //1
0138  6E3B     MOVWF 0x3B, ACCESS
117:                       
118:                       //one: high 5, low 5
119:                       //zero: high 2, low 8
120:                   loadNewData:
121:                       MOVF INDF0, 0, ACCESS //1
013A  50EF     MOVF INDF0, W, ACCESS
122:                       MOVWF RXB1D7, ACCESS //1
013C  6E3D     MOVWF 0x3D, ACCESS
123:           
124:                   dataLoadedSendBits:
125:                       MOVLW 7 //1
013E  0E07     MOVLW 0x7
126:                       MOVWF RXB1D6, ACCESS //1
0140  6E3C     MOVWF 0x3C, ACCESS
127:           
128:                   sendBitsLoop:
129:                   //## SEND BIT##
130:                       RLCF RXB1D7, 1, 0 //1
0142  363D     RLCF 0x3D, F, ACCESS
131:                       BSF PORTB, 0, ACCESS //1
0144  8081     BSF PORTB, 0, ACCESS
132:                       BC carryBitSet //1 or 2
0146  E206     BC 0x154
133:                   carryBitClear:
134:                       //Transmit a zero (high 2, low 8)
135:                       BCF PORTB, 0, ACCESS //1
0148  9081     BCF PORTB, 0, ACCESS
136:                       NOP
014A  0000     NOP
137:                       NOP
014C  0000     NOP
138:                       DECF RXB1D6, 1, ACCESS //1
014E  063C     DECF 0x3C, F, ACCESS
139:                       BZ done //1 if false, 2 otherwise
0150  E006     BZ 0x15E
140:                       BRA sendBitsLoop //2
0152  D7F7     BRA 0x142
141:                       //GOTO done //2
142:           
143:                   carryBitSet:
144:                       //Transmit a one (high 5, low 5)
145:                       DECF RXB1D6, 1, ACCESS //1
0154  063C     DECF 0x3C, F, ACCESS
146:                       NOP
0156  0000     NOP
147:                       BCF PORTB, 0, ACCESS //1
0158  9081     BCF PORTB, 0, ACCESS
148:                       NOP
015A  0000     NOP
149:                       BNZ sendBitsLoop //1 if false, 2 if true
015C  E1F2     BNZ 0x142
150:           
151:                   done:
152:                       NOP
015E  0000     NOP
153:           
154:                       //## SEND BIT##
155:                       RLCF RXB1D7, 1, 0 //1
0160  363D     RLCF 0x3D, F, ACCESS
156:                       BSF PORTB, 0, ACCESS //1
0162  8081     BSF PORTB, 0, ACCESS
157:                       BC carryBitSetFinal //1 or 2
0164  E20B     BC 0x17C
158:                   carryBitClearFinal:
159:                       //Transmit a zero (high 2, low 8)
160:                       BCF PORTB, 0, ACCESS //1
0166  9081     BCF PORTB, 0, ACCESS
161:                       BZ doneFinal
0168  E017     BZ 0x198
162:                       INCF FSR0, 1, ACCESS
016A  2AE9     INCF FSR0L, F, ACCESS
163:                       DECFSZ RXB1D5, 1, ACCESS
016C  2E3B     DECFSZ 0x3B, F, ACCESS
164:                       GOTO loadNewData //2
016E  EF9D     GOTO 0x13A
0170  F000     NOP
165:                       DECFSZ RXB1D4, 1, ACCESS
0172  2E3A     DECFSZ 0x3A, F, ACCESS
166:                       GOTO nextLED
0174  EF9B     GOTO 0x136
0176  F000     NOP
167:                       GOTO doneFinal
0178  EFCC     GOTO 0x198
017A  F000     NOP
168:           
169:                   carryBitSetFinal:
170:                       //Transmit a one (high 5, low 5)
171:                       //increment memory address
172:                       INCF FSR0, 1, ACCESS
017C  2AE9     INCF FSR0L, F, ACCESS
173:                       //Load next memory location into a register
174:                       MOVF INDF0, 0, ACCESS //1
017E  50EF     MOVF INDF0, W, ACCESS
175:                       MOVWF RXB1D7, ACCESS //1
0180  6E3D     MOVWF 0x3D, ACCESS
176:           
177:                       //OUTPUT LOW
178:                       BCF PORTB, 0, ACCESS //1
0182  9081     BCF PORTB, 0, ACCESS
179:                       //restart counter at 7
180:                       MOVLW 7 //1
0184  0E07     MOVLW 0x7
181:                       MOVWF RXB1D6, ACCESS //1
0186  6E3C     MOVWF 0x3C, ACCESS
182:           
183:                       DECFSZ RXB1D5, 1, ACCESS
0188  2E3B     DECFSZ 0x3B, F, ACCESS
184:                       GOTO sendBitsLoop //2
018A  EFA1     GOTO 0x142
018C  F000     NOP
185:                       DECFSZ RXB1D4, 1, ACCESS
018E  2E3A     DECFSZ 0x3A, F, ACCESS
186:                       GOTO nextLED
0190  EF9B     GOTO 0x136
0192  F000     NOP
187:                       GOTO doneFinal
0194  EFCC     GOTO 0x198
0196  F000     NOP
188:           
189:                   doneFinal:
190:           
191:                   asm_reset:
192:                       BCF PORTB, 0, ACCESS //1
0198  9081     BCF PORTB, 0, ACCESS
193:           
194:                       MOVLW 135 //1
019A  0E87     MOVLW 0x87
195:                   loop:
196:                       ADDLW -1 //1
019C  0FFF     ADDLW 0xFF
197:                       BNZ loop //1 if false, 2 if true
019E  E1FE     BNZ 0x19C
198:           
199:                   _endasm
200:           }
01A0  52E5     MOVF POSTDEC1, F, ACCESS
01A2  CFE7     MOVFF INDF1, FSR2L
01A4  FFD9     NOP
01A6  0012     RETURN 0
201:           
202:           void delay(void) {
203:               Delay10KTCYx(254);
01A8  0EFE     MOVLW 0xFE
01AA  6EE6     MOVWF POSTINC1, ACCESS
01AC  EC4F     CALL 0x29E, 0
01AE  F001     NOP
01B0  52E5     MOVF POSTDEC1, F, ACCESS
204:           }
01B2  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/stdclib/__init.c  -----------------------------------------------------
0308  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/startup/c018i.c  ------------------------------------------------------
0000  EF76     GOTO 0x2EC
0002  F001     NOP
0004  0012     RETURN 0
02EC  EE1D     LFSR 1, 0xD00
02EE  F000     NOP
02F0  EE2D     LFSR 2, 0xD00
02F2  F000     NOP
02F4  6AF8     CLRF TBLPTRU, ACCESS
02F6  9C01     BCF 0x1, 6, ACCESS
02F8  EC00     CALL 0x200, 0
02FA  F001     NOP
02FC  EC84     CALL 0x308, 0
02FE  F001     NOP
0300  EC0A     CALL 0x14, 0
0302  F000     NOP
0304  D7FB     BRA 0x2FC
0306  0012     RETURN 0
0200  0E06     MOVLW 0x6
0202  6EF6     MOVWF TBLPTRL, ACCESS
0204  0E00     MOVLW 0x0
0206  6EF7     MOVWF TBLPTRH, ACCESS
0208  0E00     MOVLW 0x0
020A  6EF8     MOVWF TBLPTRU, ACCESS
020C  010E     MOVLB 0xE
020E  0009     TBLRD*+
0210  50F5     MOVF TABLAT, W, ACCESS
0212  6F05     MOVWF DelayCounter1, BANKED
0214  0009     TBLRD*+
0216  50F5     MOVF TABLAT, W, ACCESS
0218  6F06     MOVWF 0x6, BANKED
021A  E103     BNZ 0x222
021C  6705     TSTFSZ DelayCounter1, BANKED
021E  D001     BRA 0x222
0220  D03D     BRA 0x29C
0222  0009     TBLRD*+
0224  50F5     MOVF TABLAT, W, ACCESS
0226  6F00     MOVWF offset, BANKED
0228  0009     TBLRD*+
022A  50F5     MOVF TABLAT, W, ACCESS
022C  6F01     MOVWF 0x1, BANKED
022E  0009     TBLRD*+
0230  50F5     MOVF TABLAT, W, ACCESS
0232  6F02     MOVWF __tmp_0, BANKED
0234  0009     TBLRD*+
0236  0009     TBLRD*+
0238  50F5     MOVF TABLAT, W, ACCESS
023A  6EE9     MOVWF FSR0L, ACCESS
023C  0009     TBLRD*+
023E  50F5     MOVF TABLAT, W, ACCESS
0240  6EEA     MOVWF FSR0H, ACCESS
0242  0009     TBLRD*+
0244  0009     TBLRD*+
0246  0009     TBLRD*+
0248  50F5     MOVF TABLAT, W, ACCESS
024A  6F03     MOVWF 0x3, BANKED
024C  0009     TBLRD*+
024E  50F5     MOVF TABLAT, W, ACCESS
0250  6F04     MOVWF i_rainbow, BANKED
0252  0009     TBLRD*+
0254  0009     TBLRD*+
0256  CFF6     MOVFF TBLPTRL, data_ptr
0258  FE07     NOP
025A  CFF7     MOVFF TBLPTRH, 0xE08
025C  FE08     NOP
025E  CFF8     MOVFF TBLPTRU, 0xE09
0260  FE09     NOP
0262  CE00     MOVFF prom, TBLPTRL
0264  FFF6     NOP
0266  CE01     MOVFF 0xE01, TBLPTRH
0268  FFF7     NOP
026A  CE02     MOVFF 0xE02, TBLPTRU
026C  FFF8     NOP
026E  010E     MOVLB 0xE
0270  5303     MOVF 0x3, F, BANKED
0272  E102     BNZ 0x278
0274  5304     MOVF i_rainbow, F, BANKED
0276  E007     BZ 0x286
0278  0009     TBLRD*+
027A  50F5     MOVF TABLAT, W, ACCESS
027C  6EEE     MOVWF POSTINC0, ACCESS
027E  0703     DECF 0x3, F, BANKED
0280  E2F8     BC 0x272
0282  0704     DECF i_rainbow, F, BANKED
0284  D7F9     BRA 0x278
0286  CE07     MOVFF data_ptr, TBLPTRL
0288  FFF6     NOP
028A  CE08     MOVFF 0xE08, TBLPTRH
028C  FFF7     NOP
028E  CE09     MOVFF 0xE09, TBLPTRU
0290  FFF8     NOP
0292  010E     MOVLB 0xE
0294  0705     DECF DelayCounter1, F, BANKED
0296  0E00     MOVLW 0x0
0298  5B06     SUBWFB 0x6, F, BANKED
029A  D7BF     BRA 0x21A
029C  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/proc/p18F25K80.asm  ---------------------------------------------------
02CC  0E41     MOVLW 0x41
02CE  6EF3     MOVWF PRODL, ACCESS
02D0  EE00     LFSR 0, 0x0
02D2  F000     NOP
02D4  0E0E     MOVLW 0xE
02D6  D801     RCALL zero_block
02D8  0012     RETURN 0
02DA  60EA     CPFSLT FSR0H, ACCESS
02DC  D002     BRA compare_l
02DE  6AEE     CLRF POSTINC0, ACCESS
02E0  D7FC     BRA zero_block
02E2  50F3     MOVF PRODL, W, ACCESS
02E4  60E9     CPFSLT FSR0L, ACCESS
02E6  0012     RETURN 0
02E8  6AEE     CLRF POSTINC0, ACCESS
02EA  D7FC     BRA loop_l
---  /MCC18/v3_39/src/traditional/delays/d10ktcyx.asm  --------------------------------------------------
029E  0EFF     MOVLW 0xFF
02A0  50E3     MOVF PLUSW1, W, ACCESS
02A2  6E05     MOVWF DelayCounter1, ACCESS
02A4  0EEF     MOVLW 0xEF
02A6  D001     BRA D10K_1
02A8  0EF3     MOVLW 0xF3
02AA  6EE7     MOVWF INDF1, ACCESS
02AC  2EE7     DECFSZ INDF1, F, ACCESS
02AE  EF56     GOTO 0x2AC
02B0  F001     NOP
02B2  0E0C     MOVLW 0xC
02B4  6E04     MOVWF i_rainbow, ACCESS
02B6  6AE7     CLRF INDF1, ACCESS
02B8  2EE7     DECFSZ INDF1, F, ACCESS
02BA  EF5C     GOTO 0x2B8
02BC  F001     NOP
02BE  2E04     DECFSZ i_rainbow, F, ACCESS
02C0  EF5B     GOTO 0x2B6
02C2  F001     NOP
02C4  2E05     DECFSZ DelayCounter1, F, ACCESS
02C6  EF54     GOTO 0x2A8
02C8  F001     NOP
02CA  0012     RETURN 0
