Disassembly Listing for pic18f25k80
Generated From:
/Users/julian/Documents/Programming/tinkering/pic18f25k80.X/dist/default/production/pic18f25k80.X.production.cof
Jul 21, 2013 4:37:02 AM

---  /Users/julian/Documents/Programming/tinkering/pic18f25k80.X/ledmain.c  -----------------------------
1:             #include "config.h"
2:             #include "constants.h"
3:             #include <p18F25K80.h>
4:             #include <delays.h>
5:             
6:             #define STRIP_DATA_TRIS TRISBbits.TRISB0
7:             #define STRIP_DATA PORTBbits.RB0
8:             
9:             #define STATUS_TRIS TRISBbits.TRISB1
10:            #define STATUS_LED PORTBbits.RB1
11:            
12:            void delay(void);
13:            
14:            void setLEDs();
15:            void sendBatch(char * ptr, char len);
16:            void sendReset();
17:            
18:            #define DATA_SIZE_1 255
19:            
20:            //RAINBOW
21:            //const char led_buffer[DATA_SIZE_1] = {0,15,0,0,15,0,1,15,0,2,15,0,3,15,0,3,15,0,4,15,0,5,15,0,6,15,0,6,15,0,7,15,0,8,15,0,9,15,0,9,15,0,10,15,0,11,15,0,12,15,0,13,15,0,13,15,0,14,15,0,15,15,0,15,15,0,15,15,0,15,14,0,15,13,0,15,12,0,15,11,0,15,11,0,15,10,0,15,9,0,15,8,0,15,8,0,15,7,0,15,6,0,15,5,0,15,5,0,15,4,0,15,3,0,15,2,0,15,2,0,15,1,0,15,0,0,15,0,0,15,0,1,15,0,1,15,0,2,15,0,3,15,0,4,15,0,4,15,0,5,15,0,6,15,0,7,15,0,7,15,0,8,15,0,9,15,0,10,15,0,10,15,0,11,15,0,12,15,0,13,15,0,14,15,0,14,15,0,15,15,0,15,14,0,15,14,0,15,13,0,15,12,0,15,11,0,15,10,0,15,10,0,15,9,0,15,8,0,15,7,0,15,7,0,15,6,0,15,5,0,15,4,0,15,4,0,15,3,0,15,2,0,15,1,0,15,1,0,15,0,0,15,0,0,15};
22:            const char led_buffer[DATA_SIZE_1+1] = {0,15,0,0,15,0,1,15,0,2,15,0,3,15,0,3,15,0,4,15,0,5,15,0,6,15,0,6,15,0,7,15,0,8,15,0,9,15,0,9,15,0,10,15,0,11,15,0,12,15,0,13,15,0,13,15,0,14,15,0,15,15,0,15,15,0,15,15,0,15,14,0,15,13,0,15,12,0,15,11,0,15,11,0,15,10,0,15,9,0,15,8,0,15,8,0,15,7,0,15,6,0,15,5,0,15,5,0,15,4,0,15,3,0,15,2,0,15,2,0,15,1,0,15,0,0,15,0,0,15,0,1,15,0,1,15,0,2,15,0,3,15,0,4,15,0,4,15,0,5,15,0,6,15,0,7,15,0,7,15,0,8,15,0,9,15,0,10,15,0,10,15,0,11,15,0,12,15,0,13,15,0,14,15,0,14,15,0,15,15,0,15,14,0,15,14,0,15,13,0,15,12,0,15,11,0,15,10,0,15,10,0,15,9,0,15,8,0,15,7,0,15,7,0,15,6,0,15,5,0,15,4,0,15,4,0,15,3,0,15,2,0,15,1,0,15,1,0,15,0,0,15,0,0,15,0};
23:            
24:            //BLUE EVERY 10
25:            //const char led_buffer[DATA_SIZE_1] = {0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0};
26:            
27:            
28:            
29:            void main(void) {
30:                STRIP_DATA_TRIS = OUTPUT;
0014  9093     BCF TRISB, 0, ACCESS
31:                STATUS_TRIS = OUTPUT;
0016  9293     BCF TRISB, 1, ACCESS
32:                PORTBbits.RB2 = OUTPUT;
0018  9481     BCF PORTB, 2, ACCESS
33:            
34:                //setup 16mhz
35:                //OSCCONbits.IRCF = 0b111; //sets internal osc to 16Mhz
36:                //OSCCONbits.SCS = 0b11;  //select internal osc as main source (This may or may not be redundant, based on your config bits.  It's not clear to me.)
37:                //OSCTUNEbits.PLLEN = 0b0;
38:            
39:                //setup 32mhz
40:                OSCCONbits.IRCF = 0b110; //sets internal osc to 16Mhz
001A  0E8F     MOVLW 0x8F
001C  14D3     ANDWF OSCCON, W, ACCESS
001E  0960     IORLW 0x60
0020  6ED3     MOVWF OSCCON, ACCESS
41:                OSCCONbits.SCS = 0b00;  //select internal osc as main source (This may or may not be redundant, based on your config bits.  It's not clear to me.)
0022  0EFC     MOVLW 0xFC
0024  14D3     ANDWF OSCCON, W, ACCESS
0026  0900     IORLW 0x0
0028  6ED3     MOVWF OSCCON, ACCESS
42:                OSCTUNEbits.PLLEN = 0b1;
002A  8C9B     BSF OSCTUNE, 6, ACCESS
43:            
44:                INTCON2bits.RBPU = 0b0;
002C  9EF1     BCF INTCON2, 7, ACCESS
45:            
46:                setLEDs();
002E  EF19     GOTO 0x32
0030  F000     NOP
47:            }
48:            
49:            void setLEDs() {
50:                sendReset();
0032  D80B     RCALL sendReset
51:                sendBatch(&led_buffer,DATA_SIZE_1);
0034  68E6     SETF POSTINC1, ACCESS
0036  0E00     MOVLW 0x0
0038  6EE6     MOVWF POSTINC1, ACCESS
003A  0E01     MOVLW 0x1
003C  6EE6     MOVWF POSTINC1, ACCESS
003E  D80A     RCALL sendBatch
0040  52E5     MOVF POSTDEC1, F, ACCESS
0042  52E5     MOVF POSTDEC1, F, ACCESS
0044  52E5     MOVF POSTDEC1, F, ACCESS
52:                //sendBatch(&led_buffer2,DATA_SIZE_2);
53:                sendReset();
0046  EF25     GOTO 0x4A
0048  F000     NOP
54:            }
55:            
56:            void sendReset() {
57:                _asm
58:                    //################### ASM RESET ##############
59:                    // sents a reset to the LED strip
60:                    asm_reset:
61:                        BCF PORTB, 0, ACCESS //1
004A  9081     BCF PORTB, 0, ACCESS
62:            
63:                        MOVLW 135 //1
004C  0E87     MOVLW 0x87
64:                    loop:
65:                        ADDLW -1 //1
004E  0FFF     ADDLW 0xFF
66:                        BNZ loop //1 if false, 2 if true
0050  E1FE     BNZ 0x4E
67:            
68:                _endasm
69:            }
0052  0012     RETURN 0
70:            
71:            void sendBatch(char * ptr, char len) {
0054  CFD9     MOVFF FSR2L, POSTINC1
0056  FFE6     NOP
0058  CFE1     MOVFF FSR1L, FSR2L
005A  FFD9     NOP
72:                    _asm
73:            
74:                    asm_reset:
75:                        BCF PORTB, 0, ACCESS //1
005C  9081     BCF PORTB, 0, ACCESS
76:            
77:                        MOVLW 135 //1
005E  0E87     MOVLW 0x87
78:                    loop:
79:                        ADDLW -1 //1
0060  0FFF     ADDLW 0xFF
80:                        BNZ loop //1 if false, 2 if true
0062  E1FE     BNZ 0x60
81:            
82:            
83:            
84:                        //loop over elements
85:            //            MOVLW  //1
86:            //            MOVWF RXB1D4, ACCESS //1
87:                        LFSR 0,led_buffer //1
0064  EE01     LFSR 0, 0x100
0066  F000     NOP
88:            
89:                    nextLED:
90:                        //loop over colors
91:                        MOVLW 255 //1
0068  0EFF     MOVLW 0xFF
92:                        MOVWF RXB1D5, ACCESS //1
006A  6E3B     MOVWF 0x3B, ACCESS
93:                        
94:                        //one: high 5, low 5
95:                        //zero: high 2, low 8
96:                    loadNewData:
97:                        MOVF INDF0, 0, ACCESS //1
006C  50EF     MOVF INDF0, W, ACCESS
98:                        MOVWF RXB1D7, ACCESS //1
006E  6E3D     MOVWF 0x3D, ACCESS
99:            
100:                   dataLoadedSendBits:
101:                       MOVLW 7 //1
0070  0E07     MOVLW 0x7
102:                       MOVWF RXB1D6, ACCESS //1
0072  6E3C     MOVWF 0x3C, ACCESS
103:           
104:                   sendBitsLoop:
105:                   //## SEND BIT##
106:                       RLCF RXB1D7, 1, 0 //1
0074  363D     RLCF 0x3D, F, ACCESS
107:                       BSF PORTB, 0, ACCESS //1
0076  8081     BSF PORTB, 0, ACCESS
108:                       BC carryBitSet //1 or 2
0078  E209     BC 0x8C
109:                   carryBitClear:
110:                       //Transmit a zero (high 2, low 8)
111:                       BCF PORTB, 0, ACCESS //1
007A  9081     BCF PORTB, 0, ACCESS
112:                       NOP
007C  0000     NOP
113:                       NOP
007E  0000     NOP
114:                       NOP
0080  0000     NOP
115:                       NOP //extra nop
0082  0000     NOP
116:                       DECF RXB1D6, 1, ACCESS //1
0084  063C     DECF 0x3C, F, ACCESS
117:                       BNZ sendBitsLoop //1 if false, 2 if true
0086  E1F6     BNZ 0x74
118:                       GOTO done //2
0088  EF4E     GOTO 0x9C
008A  F000     NOP
119:           
120:                   carryBitSet:
121:                       //Transmit a one (high 5, low 5)
122:                       DECF RXB1D6, 1, ACCESS //1
008C  063C     DECF 0x3C, F, ACCESS
123:                       NOP
008E  0000     NOP
124:                       NOP
0090  0000     NOP
125:                       NOP //extra nop
0092  0000     NOP
126:                       BCF PORTB, 0, ACCESS //1
0094  9081     BCF PORTB, 0, ACCESS
127:                       BNZ sendBitsLoop //1 if false, 2 if true
0096  E1EE     BNZ 0x74
128:                       GOTO done //2
0098  EF4E     GOTO 0x9C
009A  F000     NOP
129:           
130:                   done:
131:           
132:                       //## SEND BIT##
133:                       RLCF RXB1D7, 1, 0 //1
009C  363D     RLCF 0x3D, F, ACCESS
134:                       BSF PORTB, 0, ACCESS //1
009E  8081     BSF PORTB, 0, ACCESS
135:                       BC carryBitSetFinal //1 or 2
00A0  E208     BC 0xB2
136:                   carryBitClearFinal:
137:                       //Transmit a zero (high 2, low 8)
138:                       BCF PORTB, 0, ACCESS //1
00A2  9081     BCF PORTB, 0, ACCESS
139:                       BZ doneFinal
00A4  E011     BZ 0xC8
140:                       INCF FSR0, 1, ACCESS
00A6  2AE9     INCF FSR0L, F, ACCESS
141:                       DECFSZ RXB1D5, 1, ACCESS
00A8  2E3B     DECFSZ 0x3B, F, ACCESS
142:                       GOTO loadNewData //2
00AA  EF36     GOTO 0x6C
00AC  F000     NOP
143:           //            DECFSZ RXB1D4, 1, ACCESS
144:           //            GOTO nextLED
145:                       GOTO doneFinal
00AE  EF64     GOTO 0xC8
00B0  F000     NOP
146:           
147:                   carryBitSetFinal:
148:                       //Transmit a one (high 5, low 5)
149:                       //increment memory address
150:                       INCF FSR0, 1, ACCESS
00B2  2AE9     INCF FSR0L, F, ACCESS
151:                       //Load next memory location into a register
152:                       MOVF INDF0, 0, ACCESS //1
00B4  50EF     MOVF INDF0, W, ACCESS
153:                       MOVWF RXB1D7, ACCESS //1
00B6  6E3D     MOVWF 0x3D, ACCESS
154:           
155:                       //OUTPUT LOW
156:                       BCF PORTB, 0, ACCESS //1
00B8  9081     BCF PORTB, 0, ACCESS
157:                       //restart counter at 7
158:                       MOVLW 7 //1
00BA  0E07     MOVLW 0x7
159:                       MOVWF RXB1D6, ACCESS //1
00BC  6E3C     MOVWF 0x3C, ACCESS
160:           
161:                       DECFSZ RXB1D5, 1, ACCESS
00BE  2E3B     DECFSZ 0x3B, F, ACCESS
162:                       GOTO sendBitsLoop //2
00C0  EF3A     GOTO 0x74
00C2  F000     NOP
163:           //            DECFSZ RXB1D4, 1, ACCESS
164:           //            GOTO nextLED
165:                       GOTO doneFinal
00C4  EF64     GOTO 0xC8
00C6  F000     NOP
166:           
167:                   doneFinal:
168:           
169:                   asm_reset:
170:                       BCF PORTB, 0, ACCESS //1
00C8  9081     BCF PORTB, 0, ACCESS
171:           
172:                       MOVLW 135 //1
00CA  0E87     MOVLW 0x87
173:                   loop:
174:                       ADDLW -1 //1
00CC  0FFF     ADDLW 0xFF
175:                       BNZ loop //1 if false, 2 if true
00CE  E1FE     BNZ 0xCC
176:           
177:           
178:                   _endasm
179:           }
00D0  52E5     MOVF POSTDEC1, F, ACCESS
00D2  CFE7     MOVFF INDF1, FSR2L
00D4  FFD9     NOP
00D6  0012     RETURN 0
180:           
181:           void delay(void) {
182:               Delay10KTCYx(254);
00D8  0EFE     MOVLW 0xFE
00DA  6EE6     MOVWF POSTINC1, ACCESS
00DC  ECC1     CALL 0x182, 0
00DE  F000     NOP
00E0  52E5     MOVF POSTDEC1, F, ACCESS
183:           }
00E2  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/stdclib/__init.c  -----------------------------------------------------
01EC  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/startup/c018i.c  ------------------------------------------------------
0000  EFE8     GOTO 0x1D0
0002  F000     NOP
0004  0012     RETURN 0
01D0  EE1D     LFSR 1, 0xD00
01D2  F000     NOP
01D4  EE2D     LFSR 2, 0xD00
01D6  F000     NOP
01D8  6AF8     CLRF TBLPTRU, ACCESS
01DA  9C01     BCF 0x1, 6, ACCESS
01DC  EC72     CALL 0xE4, 0
01DE  F000     NOP
01E0  ECF6     CALL 0x1EC, 0
01E2  F000     NOP
01E4  EC0A     CALL 0x14, 0
01E6  F000     NOP
01E8  D7FB     BRA 0x1E0
01EA  0012     RETURN 0
00E4  0E06     MOVLW 0x6
00E6  6EF6     MOVWF TBLPTRL, ACCESS
00E8  0E00     MOVLW 0x0
00EA  6EF7     MOVWF TBLPTRH, ACCESS
00EC  0E00     MOVLW 0x0
00EE  6EF8     MOVWF TBLPTRU, ACCESS
00F0  010E     MOVLB 0xE
00F2  0009     TBLRD*+
00F4  50F5     MOVF TABLAT, W, ACCESS
00F6  6F05     MOVWF 0x5, BANKED
00F8  0009     TBLRD*+
00FA  50F5     MOVF TABLAT, W, ACCESS
00FC  6F06     MOVWF 0x6, BANKED
00FE  E103     BNZ 0x106
0100  6705     TSTFSZ 0x5, BANKED
0102  D001     BRA 0x106
0104  D03D     BRA 0x180
0106  0009     TBLRD*+
0108  50F5     MOVF TABLAT, W, ACCESS
010A  6F00     MOVWF 0x0, BANKED
010C  0009     TBLRD*+
010E  50F5     MOVF TABLAT, W, ACCESS
0110  6F01     MOVWF 0x1, BANKED
0112  0009     TBLRD*+
0114  50F5     MOVF TABLAT, W, ACCESS
0116  6F02     MOVWF DelayCounter2, BANKED
0118  0009     TBLRD*+
011A  0009     TBLRD*+
011C  50F5     MOVF TABLAT, W, ACCESS
011E  6EE9     MOVWF FSR0L, ACCESS
0120  0009     TBLRD*+
0122  50F5     MOVF TABLAT, W, ACCESS
0124  6EEA     MOVWF FSR0H, ACCESS
0126  0009     TBLRD*+
0128  0009     TBLRD*+
012A  0009     TBLRD*+
012C  50F5     MOVF TABLAT, W, ACCESS
012E  6F03     MOVWF DelayCounter1, BANKED
0130  0009     TBLRD*+
0132  50F5     MOVF TABLAT, W, ACCESS
0134  6F04     MOVWF 0x4, BANKED
0136  0009     TBLRD*+
0138  0009     TBLRD*+
013A  CFF6     MOVFF TBLPTRL, data_ptr
013C  FE07     NOP
013E  CFF7     MOVFF TBLPTRH, 0xE08
0140  FE08     NOP
0142  CFF8     MOVFF TBLPTRU, 0xE09
0144  FE09     NOP
0146  CE00     MOVFF prom, TBLPTRL
0148  FFF6     NOP
014A  CE01     MOVFF 0xE01, TBLPTRH
014C  FFF7     NOP
014E  CE02     MOVFF 0xE02, TBLPTRU
0150  FFF8     NOP
0152  010E     MOVLB 0xE
0154  5303     MOVF DelayCounter1, F, BANKED
0156  E102     BNZ 0x15C
0158  5304     MOVF 0x4, F, BANKED
015A  E007     BZ 0x16A
015C  0009     TBLRD*+
015E  50F5     MOVF TABLAT, W, ACCESS
0160  6EEE     MOVWF POSTINC0, ACCESS
0162  0703     DECF DelayCounter1, F, BANKED
0164  E2F8     BC 0x156
0166  0704     DECF 0x4, F, BANKED
0168  D7F9     BRA 0x15C
016A  CE07     MOVFF data_ptr, TBLPTRL
016C  FFF6     NOP
016E  CE08     MOVFF 0xE08, TBLPTRH
0170  FFF7     NOP
0172  CE09     MOVFF 0xE09, TBLPTRU
0174  FFF8     NOP
0176  010E     MOVLB 0xE
0178  0705     DECF 0x5, F, BANKED
017A  0E00     MOVLW 0x0
017C  5B06     SUBWFB 0x6, F, BANKED
017E  D7BF     BRA 0xFE
0180  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/proc/p18F25K80.asm  ---------------------------------------------------
01B0  0E41     MOVLW 0x41
01B2  6EF3     MOVWF PRODL, ACCESS
01B4  EE00     LFSR 0, 0x0
01B6  F000     NOP
01B8  0E0E     MOVLW 0xE
01BA  D801     RCALL zero_block
01BC  0012     RETURN 0
01BE  60EA     CPFSLT FSR0H, ACCESS
01C0  D002     BRA compare_l
01C2  6AEE     CLRF POSTINC0, ACCESS
01C4  D7FC     BRA zero_block
01C6  50F3     MOVF PRODL, W, ACCESS
01C8  60E9     CPFSLT FSR0L, ACCESS
01CA  0012     RETURN 0
01CC  6AEE     CLRF POSTINC0, ACCESS
01CE  D7FC     BRA loop_l
---  /MCC18/v3_39/src/traditional/delays/d10ktcyx.asm  --------------------------------------------------
0182  0EFF     MOVLW 0xFF
0184  50E3     MOVF PLUSW1, W, ACCESS
0186  6E03     MOVWF DelayCounter1, ACCESS
0188  0EEF     MOVLW 0xEF
018A  D001     BRA D10K_1
018C  0EF3     MOVLW 0xF3
018E  6EE7     MOVWF INDF1, ACCESS
0190  2EE7     DECFSZ INDF1, F, ACCESS
0192  EFC8     GOTO 0x190
0194  F000     NOP
0196  0E0C     MOVLW 0xC
0198  6E02     MOVWF DelayCounter2, ACCESS
019A  6AE7     CLRF INDF1, ACCESS
019C  2EE7     DECFSZ INDF1, F, ACCESS
019E  EFCE     GOTO 0x19C
01A0  F000     NOP
01A2  2E02     DECFSZ DelayCounter2, F, ACCESS
01A4  EFCD     GOTO 0x19A
01A6  F000     NOP
01A8  2E03     DECFSZ DelayCounter1, F, ACCESS
01AA  EFC6     GOTO 0x18C
01AC  F000     NOP
01AE  0012     RETURN 0
