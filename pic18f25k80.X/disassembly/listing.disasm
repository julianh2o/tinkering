Disassembly Listing for pic18f25k80
Generated From:
/Users/julian/Documents/Programming/tinkering/pic18f25k80.X/dist/default/production/pic18f25k80.X.production.cof
Jul 21, 2013 4:41:12 AM

---  /Users/julian/Documents/Programming/tinkering/pic18f25k80.X/ledmain.c  -----------------------------
1:             #include "config.h"
2:             #include "constants.h"
3:             #include <p18F25K80.h>
4:             #include <delays.h>
5:             
6:             #define STRIP_DATA_TRIS TRISBbits.TRISB0
7:             #define STRIP_DATA PORTBbits.RB0
8:             
9:             #define STATUS_TRIS TRISBbits.TRISB1
10:            #define STATUS_LED PORTBbits.RB1
11:            
12:            void delay(void);
13:            
14:            void setLEDs();
15:            void sendBatch(char * ptr, char len);
16:            void sendReset();
17:            
18:            #define DATA_SIZE_1 255
19:            
20:            //RAINBOW
21:            //const char led_buffer[DATA_SIZE_1] = {0,15,0,0,15,0,1,15,0,2,15,0,3,15,0,3,15,0,4,15,0,5,15,0,6,15,0,6,15,0,7,15,0,8,15,0,9,15,0,9,15,0,10,15,0,11,15,0,12,15,0,13,15,0,13,15,0,14,15,0,15,15,0,15,15,0,15,15,0,15,14,0,15,13,0,15,12,0,15,11,0,15,11,0,15,10,0,15,9,0,15,8,0,15,8,0,15,7,0,15,6,0,15,5,0,15,5,0,15,4,0,15,3,0,15,2,0,15,2,0,15,1,0,15,0,0,15,0,0,15,0,1,15,0,1,15,0,2,15,0,3,15,0,4,15,0,4,15,0,5,15,0,6,15,0,7,15,0,7,15,0,8,15,0,9,15,0,10,15,0,10,15,0,11,15,0,12,15,0,13,15,0,14,15,0,14,15,0,15,15,0,15,14,0,15,14,0,15,13,0,15,12,0,15,11,0,15,10,0,15,10,0,15,9,0,15,8,0,15,7,0,15,7,0,15,6,0,15,5,0,15,4,0,15,4,0,15,3,0,15,2,0,15,1,0,15,1,0,15,0,0,15,0,0,15};
22:            //const char led_buffer[DATA_SIZE_1+1] = {0,15,0,0,15,0,1,15,0,2,15,0,3,15,0,3,15,0,4,15,0,5,15,0,6,15,0,6,15,0,7,15,0,8,15,0,9,15,0,9,15,0,10,15,0,11,15,0,12,15,0,13,15,0,13,15,0,14,15,0,15,15,0,15,15,0,15,15,0,15,14,0,15,13,0,15,12,0,15,11,0,15,11,0,15,10,0,15,9,0,15,8,0,15,8,0,15,7,0,15,6,0,15,5,0,15,5,0,15,4,0,15,3,0,15,2,0,15,2,0,15,1,0,15,0,0,15,0,0,15,0,1,15,0,1,15,0,2,15,0,3,15,0,4,15,0,4,15,0,5,15,0,6,15,0,7,15,0,7,15,0,8,15,0,9,15,0,10,15,0,10,15,0,11,15,0,12,15,0,13,15,0,14,15,0,14,15,0,15,15,0,15,14,0,15,14,0,15,13,0,15,12,0,15,11,0,15,10,0,15,10,0,15,9,0,15,8,0,15,7,0,15,7,0,15,6,0,15,5,0,15,4,0,15,4,0,15,3,0,15,2,0,15,1,0,15,1,0,15,0,0,15,0,0,15,0};
23:            
24:            //BLUE EVERY 10
25:            const char led_buffer[DATA_SIZE_1] = {0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0};
26:            
27:            
28:            
29:            void main(void) {
30:                STRIP_DATA_TRIS = OUTPUT;
0014  9093     BCF TRISB, 0, ACCESS
31:                STATUS_TRIS = OUTPUT;
0016  9293     BCF TRISB, 1, ACCESS
32:                PORTBbits.RB2 = OUTPUT;
0018  9481     BCF PORTB, 2, ACCESS
33:            
34:                //setup 16mhz
35:                //OSCCONbits.IRCF = 0b111; //sets internal osc to 16Mhz
36:                //OSCCONbits.SCS = 0b11;  //select internal osc as main source (This may or may not be redundant, based on your config bits.  It's not clear to me.)
37:                //OSCTUNEbits.PLLEN = 0b0;
38:            
39:                //setup 32mhz
40:                OSCCONbits.IRCF = 0b110; //sets internal osc to 16Mhz
001A  0E8F     MOVLW 0x8F
001C  14D3     ANDWF OSCCON, W, ACCESS
001E  0960     IORLW 0x60
0020  6ED3     MOVWF OSCCON, ACCESS
41:                OSCCONbits.SCS = 0b00;  //select internal osc as main source (This may or may not be redundant, based on your config bits.  It's not clear to me.)
0022  0EFC     MOVLW 0xFC
0024  14D3     ANDWF OSCCON, W, ACCESS
0026  0900     IORLW 0x0
0028  6ED3     MOVWF OSCCON, ACCESS
42:                OSCTUNEbits.PLLEN = 0b1;
002A  8C9B     BSF OSCTUNE, 6, ACCESS
43:            
44:                INTCON2bits.RBPU = 0b0;
002C  9EF1     BCF INTCON2, 7, ACCESS
45:            
46:                setLEDs();
002E  EF19     GOTO 0x32
0030  F000     NOP
47:            }
48:            
49:            void setLEDs() {
50:                sendReset();
0032  D80B     RCALL sendReset
51:                sendBatch(&led_buffer,DATA_SIZE_1);
0034  68E6     SETF POSTINC1, ACCESS
0036  0E00     MOVLW 0x0
0038  6EE6     MOVWF POSTINC1, ACCESS
003A  0E01     MOVLW 0x1
003C  6EE6     MOVWF POSTINC1, ACCESS
003E  D80A     RCALL sendBatch
0040  52E5     MOVF POSTDEC1, F, ACCESS
0042  52E5     MOVF POSTDEC1, F, ACCESS
0044  52E5     MOVF POSTDEC1, F, ACCESS
52:                //sendBatch(&led_buffer2,DATA_SIZE_2);
53:                sendReset();
0046  EF25     GOTO 0x4A
0048  F000     NOP
54:            }
55:            
56:            void sendReset() {
57:                _asm
58:                    //################### ASM RESET ##############
59:                    // sents a reset to the LED strip
60:                    // a reset is a low for t > 50 microseconds
61:                    asm_reset:
62:                        BCF PORTB, 0, ACCESS //1
004A  9081     BCF PORTB, 0, ACCESS
63:            
64:                        MOVLW 135 //1
004C  0E87     MOVLW 0x87
65:                    loop:
66:                        ADDLW -1 //1
004E  0FFF     ADDLW 0xFF
67:                        BNZ loop //1 if false, 2 if true
0050  E1FE     BNZ 0x4E
68:            
69:                _endasm
70:            }
0052  0012     RETURN 0
71:            
72:            void sendBatch(char * ptr, char len) {
0054  CFD9     MOVFF FSR2L, POSTINC1
0056  FFE6     NOP
0058  CFE1     MOVFF FSR1L, FSR2L
005A  FFD9     NOP
73:                    _asm
74:                        //loop over elements
75:            //            MOVLW  //1
76:            //            MOVWF RXB1D4, ACCESS //1
77:                        LFSR 0,led_buffer //1
005C  EE01     LFSR 0, 0x100
005E  F000     NOP
78:            
79:                    nextLED:
80:                        //loop over colors
81:                        MOVLW 255 //1
0060  0EFF     MOVLW 0xFF
82:                        MOVWF RXB1D5, ACCESS //1
0062  6E3B     MOVWF 0x3B, ACCESS
83:                        
84:                        //one: high 5, low 5
85:                        //zero: high 2, low 8
86:                    loadNewData:
87:                        MOVF INDF0, 0, ACCESS //1
0064  50EF     MOVF INDF0, W, ACCESS
88:                        MOVWF RXB1D7, ACCESS //1
0066  6E3D     MOVWF 0x3D, ACCESS
89:            
90:                    dataLoadedSendBits:
91:                        MOVLW 7 //1
0068  0E07     MOVLW 0x7
92:                        MOVWF RXB1D6, ACCESS //1
006A  6E3C     MOVWF 0x3C, ACCESS
93:            
94:                    sendBitsLoop:
95:                    //## SEND BIT##
96:                        RLCF RXB1D7, 1, 0 //1
006C  363D     RLCF 0x3D, F, ACCESS
97:                        BSF PORTB, 0, ACCESS //1
006E  8081     BSF PORTB, 0, ACCESS
98:                        BC carryBitSet //1 or 2
0070  E209     BC 0x84
99:                    carryBitClear:
100:                       //Transmit a zero (high 2, low 8)
101:                       BCF PORTB, 0, ACCESS //1
0072  9081     BCF PORTB, 0, ACCESS
102:                       NOP
0074  0000     NOP
103:                       NOP
0076  0000     NOP
104:                       NOP
0078  0000     NOP
105:                       NOP //extra nop
007A  0000     NOP
106:                       DECF RXB1D6, 1, ACCESS //1
007C  063C     DECF 0x3C, F, ACCESS
107:                       BNZ sendBitsLoop //1 if false, 2 if true
007E  E1F6     BNZ 0x6C
108:                       GOTO done //2
0080  EF4A     GOTO 0x94
0082  F000     NOP
109:           
110:                   carryBitSet:
111:                       //Transmit a one (high 5, low 5)
112:                       DECF RXB1D6, 1, ACCESS //1
0084  063C     DECF 0x3C, F, ACCESS
113:                       NOP
0086  0000     NOP
114:                       NOP
0088  0000     NOP
115:                       NOP //extra nop
008A  0000     NOP
116:                       BCF PORTB, 0, ACCESS //1
008C  9081     BCF PORTB, 0, ACCESS
117:                       BNZ sendBitsLoop //1 if false, 2 if true
008E  E1EE     BNZ 0x6C
118:                       GOTO done //2
0090  EF4A     GOTO 0x94
0092  F000     NOP
119:           
120:                   done:
121:           
122:                       //## SEND BIT##
123:                       RLCF RXB1D7, 1, 0 //1
0094  363D     RLCF 0x3D, F, ACCESS
124:                       BSF PORTB, 0, ACCESS //1
0096  8081     BSF PORTB, 0, ACCESS
125:                       BC carryBitSetFinal //1 or 2
0098  E208     BC 0xAA
126:                   carryBitClearFinal:
127:                       //Transmit a zero (high 2, low 8)
128:                       BCF PORTB, 0, ACCESS //1
009A  9081     BCF PORTB, 0, ACCESS
129:                       BZ doneFinal
009C  E011     BZ 0xC0
130:                       INCF FSR0, 1, ACCESS
009E  2AE9     INCF FSR0L, F, ACCESS
131:                       DECFSZ RXB1D5, 1, ACCESS
00A0  2E3B     DECFSZ 0x3B, F, ACCESS
132:                       GOTO loadNewData //2
00A2  EF32     GOTO 0x64
00A4  F000     NOP
133:           //            DECFSZ RXB1D4, 1, ACCESS
134:           //            GOTO nextLED
135:                       GOTO doneFinal
00A6  EF60     GOTO 0xC0
00A8  F000     NOP
136:           
137:                   carryBitSetFinal:
138:                       //Transmit a one (high 5, low 5)
139:                       //increment memory address
140:                       INCF FSR0, 1, ACCESS
00AA  2AE9     INCF FSR0L, F, ACCESS
141:                       //Load next memory location into a register
142:                       MOVF INDF0, 0, ACCESS //1
00AC  50EF     MOVF INDF0, W, ACCESS
143:                       MOVWF RXB1D7, ACCESS //1
00AE  6E3D     MOVWF 0x3D, ACCESS
144:           
145:                       //OUTPUT LOW
146:                       BCF PORTB, 0, ACCESS //1
00B0  9081     BCF PORTB, 0, ACCESS
147:                       //restart counter at 7
148:                       MOVLW 7 //1
00B2  0E07     MOVLW 0x7
149:                       MOVWF RXB1D6, ACCESS //1
00B4  6E3C     MOVWF 0x3C, ACCESS
150:           
151:                       DECFSZ RXB1D5, 1, ACCESS
00B6  2E3B     DECFSZ 0x3B, F, ACCESS
152:                       GOTO sendBitsLoop //2
00B8  EF36     GOTO 0x6C
00BA  F000     NOP
153:           //            DECFSZ RXB1D4, 1, ACCESS
154:           //            GOTO nextLED
155:                       GOTO doneFinal
00BC  EF60     GOTO 0xC0
00BE  F000     NOP
156:           
157:                   doneFinal:
158:           
159:                   _endasm
160:           }
00C0  52E5     MOVF POSTDEC1, F, ACCESS
00C2  CFE7     MOVFF INDF1, FSR2L
00C4  FFD9     NOP
00C6  0012     RETURN 0
161:           
162:           void delay(void) {
163:               Delay10KTCYx(254);
00C8  0EFE     MOVLW 0xFE
00CA  6EE6     MOVWF POSTINC1, ACCESS
00CC  ECB9     CALL 0x172, 0
00CE  F000     NOP
00D0  52E5     MOVF POSTDEC1, F, ACCESS
164:           }
00D2  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/stdclib/__init.c  -----------------------------------------------------
01DC  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/startup/c018i.c  ------------------------------------------------------
0000  EFE0     GOTO 0x1C0
0002  F000     NOP
0004  0012     RETURN 0
01C0  EE1D     LFSR 1, 0xD00
01C2  F000     NOP
01C4  EE2D     LFSR 2, 0xD00
01C6  F000     NOP
01C8  6AF8     CLRF TBLPTRU, ACCESS
01CA  9C01     BCF 0x1, 6, ACCESS
01CC  EC6A     CALL 0xD4, 0
01CE  F000     NOP
01D0  ECEE     CALL 0x1DC, 0
01D2  F000     NOP
01D4  EC0A     CALL 0x14, 0
01D6  F000     NOP
01D8  D7FB     BRA 0x1D0
01DA  0012     RETURN 0
00D4  0E06     MOVLW 0x6
00D6  6EF6     MOVWF TBLPTRL, ACCESS
00D8  0E00     MOVLW 0x0
00DA  6EF7     MOVWF TBLPTRH, ACCESS
00DC  0E00     MOVLW 0x0
00DE  6EF8     MOVWF TBLPTRU, ACCESS
00E0  010E     MOVLB 0xE
00E2  0009     TBLRD*+
00E4  50F5     MOVF TABLAT, W, ACCESS
00E6  6F05     MOVWF 0x5, BANKED
00E8  0009     TBLRD*+
00EA  50F5     MOVF TABLAT, W, ACCESS
00EC  6F06     MOVWF 0x6, BANKED
00EE  E103     BNZ 0xF6
00F0  6705     TSTFSZ 0x5, BANKED
00F2  D001     BRA 0xF6
00F4  D03D     BRA 0x170
00F6  0009     TBLRD*+
00F8  50F5     MOVF TABLAT, W, ACCESS
00FA  6F00     MOVWF 0x0, BANKED
00FC  0009     TBLRD*+
00FE  50F5     MOVF TABLAT, W, ACCESS
0100  6F01     MOVWF 0x1, BANKED
0102  0009     TBLRD*+
0104  50F5     MOVF TABLAT, W, ACCESS
0106  6F02     MOVWF DelayCounter2, BANKED
0108  0009     TBLRD*+
010A  0009     TBLRD*+
010C  50F5     MOVF TABLAT, W, ACCESS
010E  6EE9     MOVWF FSR0L, ACCESS
0110  0009     TBLRD*+
0112  50F5     MOVF TABLAT, W, ACCESS
0114  6EEA     MOVWF FSR0H, ACCESS
0116  0009     TBLRD*+
0118  0009     TBLRD*+
011A  0009     TBLRD*+
011C  50F5     MOVF TABLAT, W, ACCESS
011E  6F03     MOVWF DelayCounter1, BANKED
0120  0009     TBLRD*+
0122  50F5     MOVF TABLAT, W, ACCESS
0124  6F04     MOVWF 0x4, BANKED
0126  0009     TBLRD*+
0128  0009     TBLRD*+
012A  CFF6     MOVFF TBLPTRL, data_ptr
012C  FE07     NOP
012E  CFF7     MOVFF TBLPTRH, 0xE08
0130  FE08     NOP
0132  CFF8     MOVFF TBLPTRU, 0xE09
0134  FE09     NOP
0136  CE00     MOVFF prom, TBLPTRL
0138  FFF6     NOP
013A  CE01     MOVFF 0xE01, TBLPTRH
013C  FFF7     NOP
013E  CE02     MOVFF 0xE02, TBLPTRU
0140  FFF8     NOP
0142  010E     MOVLB 0xE
0144  5303     MOVF DelayCounter1, F, BANKED
0146  E102     BNZ 0x14C
0148  5304     MOVF 0x4, F, BANKED
014A  E007     BZ 0x15A
014C  0009     TBLRD*+
014E  50F5     MOVF TABLAT, W, ACCESS
0150  6EEE     MOVWF POSTINC0, ACCESS
0152  0703     DECF DelayCounter1, F, BANKED
0154  E2F8     BC 0x146
0156  0704     DECF 0x4, F, BANKED
0158  D7F9     BRA 0x14C
015A  CE07     MOVFF data_ptr, TBLPTRL
015C  FFF6     NOP
015E  CE08     MOVFF 0xE08, TBLPTRH
0160  FFF7     NOP
0162  CE09     MOVFF 0xE09, TBLPTRU
0164  FFF8     NOP
0166  010E     MOVLB 0xE
0168  0705     DECF 0x5, F, BANKED
016A  0E00     MOVLW 0x0
016C  5B06     SUBWFB 0x6, F, BANKED
016E  D7BF     BRA 0xEE
0170  0012     RETURN 0
---  /MCC18/v3_39/src/traditional/proc/p18F25K80.asm  ---------------------------------------------------
01A0  0E41     MOVLW 0x41
01A2  6EF3     MOVWF PRODL, ACCESS
01A4  EE00     LFSR 0, 0x0
01A6  F000     NOP
01A8  0E0E     MOVLW 0xE
01AA  D801     RCALL zero_block
01AC  0012     RETURN 0
01AE  60EA     CPFSLT FSR0H, ACCESS
01B0  D002     BRA compare_l
01B2  6AEE     CLRF POSTINC0, ACCESS
01B4  D7FC     BRA zero_block
01B6  50F3     MOVF PRODL, W, ACCESS
01B8  60E9     CPFSLT FSR0L, ACCESS
01BA  0012     RETURN 0
01BC  6AEE     CLRF POSTINC0, ACCESS
01BE  D7FC     BRA loop_l
---  /MCC18/v3_39/src/traditional/delays/d10ktcyx.asm  --------------------------------------------------
0172  0EFF     MOVLW 0xFF
0174  50E3     MOVF PLUSW1, W, ACCESS
0176  6E03     MOVWF DelayCounter1, ACCESS
0178  0EEF     MOVLW 0xEF
017A  D001     BRA D10K_1
017C  0EF3     MOVLW 0xF3
017E  6EE7     MOVWF INDF1, ACCESS
0180  2EE7     DECFSZ INDF1, F, ACCESS
0182  EFC0     GOTO 0x180
0184  F000     NOP
0186  0E0C     MOVLW 0xC
0188  6E02     MOVWF DelayCounter2, ACCESS
018A  6AE7     CLRF INDF1, ACCESS
018C  2EE7     DECFSZ INDF1, F, ACCESS
018E  EFC6     GOTO 0x18C
0190  F000     NOP
0192  2E02     DECFSZ DelayCounter2, F, ACCESS
0194  EFC5     GOTO 0x18A
0196  F000     NOP
0198  2E03     DECFSZ DelayCounter1, F, ACCESS
019A  EFBE     GOTO 0x17C
019C  F000     NOP
019E  0012     RETURN 0
